using utils.Test;
using utils.ExpectValues;

using com.industry.rx_epl.Observable;
using com.industry.rx_epl.WrappedAny;

monitor TestObservable {
	Test test := Test("TestResult");
  
	action onload() {
		on utils.KeepAliveUntilTerminated() {}
	    any discard := Observable.fromChannel("c1").take(3).combineLatestToSequence([Observable.fromChannel("c2").take(3)])
	      	.subscribe(ExpectValues.create([<any>[<any>0,1], [<any>2,1], [<any>3,1], [<any>3,4], [<any>3,5]], test.complete, test.fail));

		on wait(0.5) {
			send WrappedAny(0) to "c1";
			on wait(0.1) {
				send WrappedAny(1) to "c2";
			}
			on wait(0.2) {
				send WrappedAny(2) to "c1";
			}
			on wait(0.3) {
				send WrappedAny(3) to "c1";
			}
			on wait(0.4) {
				send WrappedAny(4) to "c2";
			}
			on wait(0.5) {
				send WrappedAny(5) to "c2";
			}
		}
	}
}
