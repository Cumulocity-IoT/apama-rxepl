using utils.TestObservables;
using utils.Test;
using utils.ExpectValues;

monitor TestObservable {
	Test test := Test("TestResult");
	
	integer teardownCount := 0;
  
	action onload() {
		on utils.KeepAliveUntilTerminated() {}
	    any discard := TestObservables.createSync()
			.do(ExpectValues.createNoComplete([<any>0.0,1.0,2.0,3.0], countTeardowns, test.fail))
			.takeWhile(lt3)
	      	.subscribe(ExpectValues.create([<any>0.0, 1.0, 2.0], countTeardowns, test.fail));
	} 

	action lt3(any value) returns boolean {
		return <float> value < 3.0;
	}
	
	action countTeardowns() {
		teardownCount := teardownCount + 1;
		if teardownCount = 2 {
			test.complete();
		}
	}
}
