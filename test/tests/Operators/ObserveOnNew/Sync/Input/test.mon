using com.industry.rx_epl.Observable;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.IDisposable;

using utils.Test;
using utils.TestObservables;
using utils.ExpectValues;

event TornDown {}

monitor TestObservable {
	Test test := Test("TestResult");

	integer teardownCount := 0;
	
	IDisposable disposable;
	
	action onload() {
		on utils.KeepAliveUntilTerminated() {}
		disposable := TestObservables.createSync().take(3)
			.do(ExpectValues.create([<any>0.0,1.0,2.0], countTeardownsAndDispose, test.fail))
  			.observeOnNew(onDiffContext);

		on TornDown() {
			countTeardownsAndDispose();
		}
	}
	
	action onDiffContext(IObservable o, action<> dispose) {
		ISubscription downstreamSubscription := o.subscribe(ExpectValues.create([<any>0.0,1.0,2.0], sendTornDown, test.fail));
	}
	
	action sendTornDown() {
		send TornDown() to "";
	}
	
	action countTeardownsAndDispose() {
		teardownCount := teardownCount + 1;
		if teardownCount = 2 {
			disposable.dispose();
			test.complete();
		}
	}
}
