using utils.TestObservables;
using utils.Test;
using utils.ExpectValues;

using com.industry.rx_epl.Observable;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.IDisposable;
using com.industry.rx_epl.Subscriber;

monitor TestObservable {
	Test test := Test("TestResult");
  
	boolean isConnected := false;
	integer teardownCount := 0;
	
	action onload() {
		on utils.KeepAliveUntilTerminated() {}
	     IObservable replay := Observable.interval(0.1).take(5).publishReplay(2);

	     any subscription1 := replay.subscribe(ExpectValues.create([<any>0,1,2,3,4], onTeardown, test.fail));
	
	     on wait(0.1 + 0.15) {
	    	 any subscription2 := replay.subscribe(ExpectValues.create([<any>0,1,2,3,4], onTeardown, test.fail));
	     }
	     
	     on wait(0.1 + 0.35) {
	    	 any subscription3 := replay.subscribe(ExpectValues.create([<any>1,2,3,4], onTeardown, test.fail));
	     }
	     
	     on wait(0.1 + 0.45) {
	    	 any subscription4 := replay.subscribe(ExpectValues.create([<any>2,3,4], onTeardown, test.fail));
	     }
	     
	     on wait(0.1 + 0.6) {
	    	 // Should call complete if connecting to a completed observable
		     any subscription5 := replay.subscribe(ExpectValues.create(new sequence<any>, onTeardown, test.fail));
	     }
	     
	     on wait(0.1) {
	    	 isConnected := true;
	    	 any connection := replay.connect();
	     }
	}
	
	action onTeardown() {
		teardownCount := teardownCount + 1;
		if teardownCount = 5 {
			test.complete();
		}
	}
}
