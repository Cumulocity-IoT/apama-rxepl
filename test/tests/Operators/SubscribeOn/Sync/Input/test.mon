using utils.TestObservables;
using utils.Test;
using utils.ExpectValues;

using com.industry.rx_epl.Observable;
using com.industry.rx_epl.IResolver;
using com.industry.rx_epl.Subscriber;

monitor TestObservable {
	Test test := Test("TestResult");

	integer teardownCount := 0;

	action onload() {
		on utils.KeepAliveUntilTerminated() {}
		context testContext := context("NewTestContext", false);

	    any discard := Observable.create(generator)
			.do(Subscriber.create().onNext(checkContextNext).onComplete(checkContext))
			.take(4)
			.do(Subscriber.create().onNext(checkContextNext).onComplete(checkContext))
			.do(ExpectValues.create([<any>"Value", "Value", "Value"], checkContext, test.fail))
	      	.subscribeOn(Subscriber.create().onNext(checkContextNext).onComplete(checkContextComplete), testContext);
	}

	action generator(IResolver resolver) {
		checkContext();
		resolver.next("Value");
		resolver.next("Value");
		resolver.next("Value");
		resolver.complete();
	}

	action checkContextNext(any value) {
		checkContext();
	}

	action checkContextComplete() {
		checkContext();
		test.complete();
	}

	action checkContext() {
		if context.current().getName() != "NewTestContext" {
			test.fail("Running on wrong context");
		}
	}
}
