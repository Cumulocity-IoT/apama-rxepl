using com.industry.rx_epl.Observable;

using utils.Test;
using utils.TestObservables;
using utils.ExpectValues;

monitor TestObservable {
	Test test := Test("TestResult");
  
	integer teardownCount := 0;
	
	action onload() {
		on utils.KeepAliveUntilTerminated() {}
		any discard := Observable.fromValues([<any>1,2.0,3.0d]).async()
			.average()
      		.subscribe(ExpectValues.create([<any>2.0], onTeardown, test.fail));
		
		discard := Observable.fromValues([<any>1,2.0,3.0d]).async()
			.averageDecimal()
      		.subscribe(ExpectValues.create([<any>2.0d], onTeardown, test.fail));
		
		discard := Observable.empty().async()
      		.average()
      		.subscribe(ExpectValues.create(new sequence<any>, onTeardown, test.fail));
		
		discard := Observable.empty().async()
      		.averageDecimal()
      		.subscribe(ExpectValues.create(new sequence<any>, onTeardown, test.fail));
	}
	
	action onTeardown() {
		teardownCount := teardownCount + 1;
		if teardownCount = 4 {
			test.complete();
		}
	}
}
