using utils.TestObservables;
using utils.Test;
using utils.ExpectValues;

using com.industry.rx_epl.operators.Take;
using com.industry.rx_epl.operators.Map;

monitor TestObservable {
	Test test := Test("TestResult");
  
	action onload() {
		on utils.KeepAliveUntilTerminated() {}
	    any discard := TestObservables.createAsync()
	      	.pipe([Take.create(3), Map.create(multiplyBy10)])
	      	.subscribe(ExpectValues.create([<any>0.0, 10.0, 20.0], test.complete, test.fail));
	} 
	
	action multiplyBy10(any value) returns any {
		return <float> value * 10.0;
	}
}
