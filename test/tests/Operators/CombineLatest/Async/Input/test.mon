using utils.Test;
using utils.ExpectValues;

using com.industry.rx_epl.Observable;
using com.industry.rx_epl.WrappedAny;

monitor TestObservable {
	Test test := Test("TestResult");
  
	action onload() {
		on utils.KeepAliveUntilTerminated() {}
	    any discard := Observable.fromChannel("c1").take(3).combineLatest([Observable.fromChannel("c2").take(3)], combineIntoIntArray)
	      	.subscribe(ExpectValues.create([<any>[0,1], [2,1], [3,1], [3,4], [3,5]], test.complete, test.fail));

		on wait(0.5) {
			send WrappedAny(0) to "c1";
			on wait(0.1) {
				send WrappedAny(1) to "c2";
			}
			on wait(0.2) {
				send WrappedAny(2) to "c1";
			}
			on wait(0.3) {
				send WrappedAny(3) to "c1";
			}
			on wait(0.4) {
				send WrappedAny(4) to "c2";
			}
			on wait(0.5) {
				send WrappedAny(5) to "c2";
			}
		}
	} 
	
	action combineIntoIntArray(sequence<any> values) returns any {
		sequence<integer> intArray := new sequence<integer>;
		any value;
		for value in values {
			intArray.append(<integer> value);
		}
		return intArray;
	}
}
