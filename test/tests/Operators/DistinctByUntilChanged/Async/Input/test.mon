using utils.TestObservables;
using utils.Test;
using utils.ExpectValues;

using com.industry.rx_epl.Observable;
using com.industry.rx_epl.WrappedAny;

event TestEvent {
	integer i;
	float abc;
	
	static action create(integer i) returns TestEvent {
		return TestEvent(i, 1.0.rand());
	}
}

monitor TestObservable {
	Test test := Test("TestResult");
  
	action onload() {
		on utils.KeepAliveUntilTerminated() {}
	    any discard := Observable.fromChannel("Test")
			.distinctByUntilChanged(getIValue)
			.take(4)
	      	.subscribe(ExpectValues.create([<any>TestEvent(1, 2.0),TestEvent(2, 2.0),TestEvent(1, 2.0),TestEvent(0, 2.0)], test.complete, test.fail));
	    
	    on wait(0.5) {
	    	send TestEvent(1, 2.0) to "Test";
	    	send TestEvent.create(1) to "Test";
	    	send TestEvent(2, 2.0) to "Test";
	    	send TestEvent.create(2) to "Test";
	    	send TestEvent(1, 2.0) to "Test";
	    	send TestEvent(0, 2.0) to "Test";
	    	send TestEvent.create(0) to "Test";
	    }
	}
	
	action getIValue(any testEventAsAny) returns any {
		return (<TestEvent> testEventAsAny).i;
	}
}
