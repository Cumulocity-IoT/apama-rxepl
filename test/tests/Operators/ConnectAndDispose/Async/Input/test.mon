using utils.TestObservables;
using utils.Test;
using utils.ExpectValues;

using com.industry.rx_epl.Observable;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.IDisposable;
using com.industry.rx_epl.Subscriber;

monitor TestObservable {
	Test test := Test("TestResult");
  
	boolean isConnected := false;
	IDisposable connection;
	
	action onload() {
		on utils.KeepAliveUntilTerminated() {}
	     IObservable connectableObservable := Observable.interval(0.1)
		   											  .take(6)
                                                      .map(makeSureNotCalledUntilConnected)
                                                      .publish();
	    
	     any subscription := connectableObservable.subscribe(ExpectValues.create([<any>0,1,2,0,1,0,1,2,3,4,5], test.complete, test.fail));
	     
	     on wait(0.1) {
	    	 isConnected := true;
	    	 connection := connectableObservable.connect();
	     }
	     on wait(0.4) {
	    	 isConnected := false;
	    	 connection.dispose();
	     }
	     on wait(0.5) {
	    	 isConnected := true;
	    	 connection := connectableObservable.connect();
	     }
	     on wait(0.7) {
	    	 isConnected := false;
	    	 connection.dispose();
	     }
	     on wait(0.8) {
	    	 isConnected := true;
	    	 connection := connectableObservable.connect();
	     }
	}
	
	action makeSureNotCalledUntilConnected(any value) returns any {
		if not isConnected {
			test.fail("Should not be called until connected");
		}
		return value;
	}
}
