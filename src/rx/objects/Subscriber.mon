/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package com.industry.rx_epl;

using com.industry.rx_epl.utils.Actions;
using com.industry.rx_epl.utils.internal.WrapGeneric;

using com.apama.exceptions.Exception;

event Subscriber {	
	action<any> next;
	action<any> error;
	action<> complete;
	
	boolean _subscribed;
	sequence<action<> > unsubscribeListeners;
	
	static action create() returns Subscriber {
		return Subscriber(defaultNext, defaultError, defaultComplete, false, new sequence<action<> >);
	}
	
	action onNext(any next) returns Subscriber {
		Actions.checkAction(next, 1, 0, "");
		self.next := WrapGeneric.create(Actions.getCoercingGenericAction(next, ""));
		return self;
	}

	action onError(any error) returns Subscriber {
		Actions.checkAction(error, 1, 0, "");
		self.error := WrapGeneric.create(Actions.getCoercingGenericAction(error, ""));
		return self;
	}
	
	action onComplete(action<> complete) returns Subscriber {
		self.complete := complete;
		return self;
	}
	
	action onUnsubscribe(action<> onUnsubscribe) {
		unsubscribeListeners.append(onUnsubscribe);
	}
	
	action unsubscribe() {
		if _subscribed {
			_subscribed := false;
			action<> unsubListener;
			for unsubListener in unsubscribeListeners {
				unsubListener();
			}
		}
	}
	
	action subscribed() returns boolean {
		return _subscribed;
	}
	
	action subscribe() {
		_subscribed := true;
	}
	
	static action defaultNext(any value) {
		// Do nothing
	}
	
	static action defaultError(any e) {
		switch(e) {
			case Exception: {
				log "Original Exception: " + e.toStringWithStackTrace() at ERROR;
				throw e;
			}
			default: {
				throw Exception(e.valueToString(), "ObservableError");
			}
		}
	}
	
	static action defaultComplete() {
		// Do nothing
	}
	
	action asIObserver() returns IObserver {
		return IObserver(self, IObserverId.create(), next, error, complete, onUnsubscribe, unsubscribe, subscribed, subscribe);
	}
}

/** @private */
event IObserverBuilder {
	IObserver observer;
	
	static action create(IObserver subscriber) returns IObserverBuilder {
		return IObserverBuilder(subscriber);
	}
	
	action onNext(action<any> onNext) returns IObserverBuilder {
		observer.next := onNext;
		return self;
	}
	
	action onError(action<any> onError) returns IObserverBuilder {
		observer.error := onError;
		return self;
	}
	
	action onComplete(action<> onComplete) returns IObserverBuilder {
		observer.complete := onComplete;
		return self;
	}
	
	action build() returns IObserver {
		return observer;
	}
}