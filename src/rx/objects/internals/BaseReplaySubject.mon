/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package com.industry.rx_epl.internals;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubject;

using com.apama.exceptions.Exception;

/** @private */
event ReplaySubjectHandler {
	dictionary<integer, IObserver> subscribers;
	boolean isComplete;
	integer replayCount;
	sequence<any> replayValues;
	
	static action create(integer replayCount) returns ReplaySubjectHandler {
		if replayCount < 0 {
			throw Exception("The replay count must be >= 0", "IllegalArgumentException");
		}
		return ReplaySubjectHandler(new dictionary<integer, IObserver>, false, replayCount, new sequence<any>);
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		// Should create the subscription before sending any next, error, complete
		ISubscription s := Subscription.create(subscriber).asISubscription();
		
		any value;
		for value in replayValues {
			if not subscriber.subscribed() {
				break;
			}
			subscriber.next(value);
		}
		
		if not isComplete {
			subscribers.add(subscriber.getId(), subscriber);
			subscriber.onUnsubscribe(SubjectOnDisconnection.create(subscribers, subscriber.getId()));
		} else {
			if subscriber.subscribed() {
				subscriber.complete();
			}
		}
		return s;
	}
	
	action next(any value) {
		replayValues.append(value);
		if replayValues.size() > replayCount {
			replayValues.remove(0);
		}
		
		IObserver s;
		for s in subscribers.values() {
			s.next(value);
		}
	}
	
	action error(any e) {
		isComplete := true;	
		
		IObserver s;
		for s in subscribers.values() {
			s.error(e);
		}	
	}
	
	action complete() {
		isComplete := true;	
		
		IObserver s;
		for s in subscribers.values() {
			s.complete();
			s.disconnect();
		}
	}
}

/** @private */
event BaseReplaySubject {	
	IObservable observable;
	
	action<any> next;
	action<any> error;
	action<> complete;
	
	static action create(IObservable observable, action<action<IObserver> returns ISubscription> setOnConnection, integer replayCount) returns ISubject {
		ReplaySubjectHandler h := ReplaySubjectHandler.create(replayCount);
		// Can't pull from a subject so the observable is hot
		BaseReplaySubject s := BaseReplaySubject(observable, h.next, h.error, h.complete);
		setOnConnection(h.onConnection);
		return s.asISubject();
	}
	
	action asISubject() returns ISubject {
		return SubjectUtils.isubjectFromSubject(self, next, error, complete, observable, asIObservable);
	}
	
	action asIObservable() returns IObservable {
		return SubjectUtils.iobservableFromSubject(self, observable);
	}
}