/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package com.industry.rx_epl.internals;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.SubjectOnDisconnection;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubject;

using com.apama.exceptions.Exception;

/** @private */
event RepeatToFirstSubjectHandler {
	dictionary<integer, IObserver> subscribers;
	boolean isComplete;
	sequence<any> buffer;
	boolean shouldRepeat;
	
	static action create() returns RepeatToFirstSubjectHandler {
		return RepeatToFirstSubjectHandler(new dictionary<integer, IObserver>, false, new sequence<any>, true);
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		ISubscription s := Subscription.create(subscriber).asISubscription();
		if shouldRepeat {
			on wait(0.0) {
				shouldRepeat := false;
				buffer.clear();
			}
			any value;
			for value in buffer {
				subscriber.next(value);
			}
		}
		if not isComplete {
			subscribers.add(subscriber.getId(), subscriber);
			subscriber.onUnsubscribe(SubjectOnDisconnection.create(subscribers, subscriber.getId()));
		} else {
			subscriber.complete();
		}
		return s;
	}
	
	action next(any value) {
		if shouldRepeat {
			on wait(0.0) {
				shouldRepeat := false;
				buffer.clear();
			}
			buffer.append(value);
		}
		IObserver s;
		for s in subscribers.values() {
			s.next(value);
		}
	}
	
	action error(any e) {
		IObserver s;
		for s in subscribers.values(){
			s.error(e);
		}		
	}
	
	action complete() {
		IObserver s;
		for s in subscribers.values() {
			s.complete();
			s.disconnect();
		}
		isComplete := true;
		subscribers.clear();
	}
}

/** @private */
event BaseRepeatToFirstSubject {	
	IObservable observable;
	
	action<any> next;
	action<any> error;
	action<> complete;
	
	static action create(IObservable observable, action<action<IObserver> returns ISubscription> setOnConnection) returns ISubject {
		RepeatToFirstSubjectHandler h := RepeatToFirstSubjectHandler.create();
		// Can't pull from a subject so the observable is hot
		BaseRepeatToFirstSubject s := BaseRepeatToFirstSubject(observable, h.next, h.error, h.complete);
		setOnConnection(h.onConnection);
		return s.asISubject();
	}

	action asISubject() returns ISubject {
		return ISubject(self, 
		                next, error, complete, asIObservable,
		                observable.connectObserver, observable.subscribe, observable.map, observable.publish, observable.connect, observable.refCount, observable.share, observable.take, observable.takeLast, observable.first, observable.last, observable.skip, observable.skipLast, observable.filter, observable.scan, observable.scanWithInitial, observable.distinct, observable.distinctBy, observable.combineLatest, observable.withLatestFrom, observable.delay, observable.async, observable.do, observable.publishReplay, observable.shareReplay, observable.takeUntil, observable.repeat, observable.flatMap, observable.merge, observable.zip, observable.switchOnNext, observable.skipUntil, observable.elementAt, observable.reduce, observable.reduceWithInitial, observable.toStream, observable.catchError, observable.retry, observable.observeOn, observable.groupBy, observable.observeToChannel, observable.observeOnNew, observable.every, observable.contains, observable.takeWhile, observable.skipWhile, observable.concat, observable.startWith, observable.defaultIfEmpty, observable.ignoreElements, observable.count, observable.sum, observable.sumInteger, observable.sumFloat, observable.sumDecimal, observable.concatString, observable.max, observable.maxInteger, observable.maxFloat, observable.maxDecimal, observable.min, observable.minInteger, observable.minFloat, observable.minDecimal, observable.average, observable.averageDecimal, observable.sequenceEqual, observable.amb, observable.timestamp, observable.updateTimestamp, observable.timeout, observable.getSync, observable.getSyncOr, observable.timeInterval, observable.distinctUntilChanged, observable.distinctByUntilChanged, observable.switchMap, observable.debounce, observable.windowTime, observable.throttleFirst, observable.throttleLast, observable.sampleTime, observable.buffer, observable.bufferTime, observable.bufferCount, observable.bufferTimeOrCount, observable.combineLatestToSequence, observable.withLatestFromToSequence, observable.zipToSequence, observable.groupByWindow, observable.windowCount, observable.windowTimeOrCount, observable.sample, observable.sampleCount, observable.sampleTimeOrCount, observable.bufferCountSkip, observable.pipe, observable.pluck, observable.mergeAll, observable.pipeOn, observable.pipeOnNew, observable.subscribeOn, observable.subscribeOnNew, observable.pairwise, observable.let, observable.groupByField, observable.complexPipe, observable.complexPipeOn, observable.complexPipeOnNew, observable.decouple, observable.distinctByField, observable.distinctByFieldUntilChanged, observable.pausable, observable.pausableBuffered, observable.toChannel);
	}
	
	action asIObservable() returns IObservable {
		return IObservable(self, 
		                   observable.connectObserver, observable.subscribe, observable.map, observable.publish, observable.connect, observable.refCount, observable.share, observable.take, observable.takeLast, observable.first, observable.last, observable.skip, observable.skipLast, observable.filter, observable.scan, observable.scanWithInitial, observable.distinct, observable.distinctBy, observable.combineLatest, observable.withLatestFrom, observable.delay, observable.async, observable.do, observable.publishReplay, observable.shareReplay, observable.takeUntil, observable.repeat, observable.flatMap, observable.merge, observable.zip, observable.switchOnNext, observable.skipUntil, observable.elementAt, observable.reduce, observable.reduceWithInitial, observable.toStream, observable.catchError, observable.retry, observable.observeOn, observable.groupBy, observable.observeToChannel, observable.observeOnNew, observable.every, observable.contains, observable.takeWhile, observable.skipWhile, observable.concat, observable.startWith, observable.defaultIfEmpty, observable.ignoreElements, observable.count, observable.sum, observable.sumInteger, observable.sumFloat, observable.sumDecimal, observable.concatString, observable.max, observable.maxInteger, observable.maxFloat, observable.maxDecimal, observable.min, observable.minInteger, observable.minFloat, observable.minDecimal, observable.average, observable.averageDecimal, observable.sequenceEqual, observable.amb, observable.timestamp, observable.updateTimestamp, observable.timeout, observable.getSync, observable.getSyncOr, observable.timeInterval, observable.distinctUntilChanged, observable.distinctByUntilChanged, observable.switchMap, observable.debounce, observable.windowTime, observable.throttleFirst, observable.throttleLast, observable.sampleTime, observable.buffer, observable.bufferTime, observable.bufferCount, observable.bufferTimeOrCount, observable.combineLatestToSequence, observable.withLatestFromToSequence, observable.zipToSequence, observable.groupByWindow, observable.windowCount, observable.windowTimeOrCount, observable.sample, observable.sampleCount, observable.sampleTimeOrCount, observable.bufferCountSkip, observable.pipe, observable.pluck, observable.mergeAll, observable.pipeOn, observable.pipeOnNew, observable.subscribeOn, observable.subscribeOnNew, observable.pairwise, observable.let, observable.groupByField, observable.complexPipe, observable.complexPipeOn, observable.complexPipeOnNew, observable.decouple, observable.distinctByField, observable.distinctByFieldUntilChanged, observable.pausable, observable.pausableBuffered, observable.toChannel);
	}
}