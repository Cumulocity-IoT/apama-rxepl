/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package com.industry.rx_epl.operators;

using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.ISubscription;

using com.industry.rx_epl.operators.internals.BufferOnConnection;
using com.industry.rx_epl.operators.internals.BufferCountOnConnection;
using com.industry.rx_epl.operators.internals.BufferTimeOrCountOnConnection;

event Buffer {
	IObservable trigger;
	
	static action create(IObservable trigger) returns action<action<IObserver> returns ISubscription> returns action<IObserver> returns ISubscription {
		return Buffer(trigger).pipeModifier;
	}

	action pipeModifier(action<IObserver> returns ISubscription onConnection) returns action<IObserver> returns ISubscription {
		return BufferOnConnection.create(onConnection, trigger);
	}
}

event BufferCountSkip {
	integer count;
	integer skip;
	
	static action create(integer count, integer skip) returns action<action<IObserver> returns ISubscription> returns action<IObserver> returns ISubscription {
		return BufferCountSkip(count, skip).pipeModifier;
	}

	action pipeModifier(action<IObserver> returns ISubscription onConnection) returns action<IObserver> returns ISubscription {
		return BufferCountOnConnection.create(onConnection, count, skip);
	}
}

event BufferCount {	
	static action create(integer count) returns action<action<IObserver> returns ISubscription> returns action<IObserver> returns ISubscription {
		return BufferCountSkip(count, count).pipeModifier;
	}
}

event BufferTimeOrCount {
	float time;
	integer count;
	
	static action create(float time, integer count) returns action<action<IObserver> returns ISubscription> returns action<IObserver> returns ISubscription {
		return BufferTimeOrCount(time, count).pipeModifier;
	}

	action pipeModifier(action<IObserver> returns ISubscription onConnection) returns action<IObserver> returns ISubscription {
		return BufferTimeOrCountOnConnection.create(onConnection, time, count);
	}
}