/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IDisposable;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;
using com.industry.rx_epl.ISubject;

/** @private */
event PublishSubscriber {
	ISubject publishSubject;
	action<> onComplete;
	action<> returns boolean isUnsubscribed;
	
	static action create(ISubject publishSubject, action<> onComplete, action<> returns boolean isUnsubscribed) returns IObserver {
		PublishSubscriber p := PublishSubscriber(publishSubject, onComplete, isUnsubscribed);
		IObserver s := Subscriber.create().onNext(p.next).onError(p.error).onComplete(p.complete).asIObserver();
		return s;
	}
	
	action next(any value) {
		publishSubject.next(value);
	}
	
	action error(any e) {
		publishSubject.next(e);	
	}
	
	action complete() {
		publishSubject.complete();
		onComplete();
	}
}

/** @private */
event PublishHandler {
	action<IObserver> returns ISubscription parentOnConnection;
	IDisposable connection;
	ISubscription upstreamSubscription;
	optional<IObserver> upstreamSubscriber;
	ISubject publishSubject;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, IDisposable connection, ISubject publishSubject) returns PublishHandler {
		return PublishHandler(parentOnConnection, connection, new ISubscription, new optional<IObserver>, publishSubject);
	}
	
	action connect() returns IDisposable {
		// If there isn't an upstream subscription then create one
		if upstreamSubscriber.empty() {
			upstreamSubscriber := PublishSubscriber.create(publishSubject, onComplete, isUnsubscribed);
			connection.onDispose := reset;
			upstreamSubscription := parentOnConnection(upstreamSubscriber.getOrThrow());
		}
		return connection;
	}
	
	action isUnsubscribed() returns boolean {
		return upstreamSubscriber.empty();
	}
	
	action onComplete() {
		ifpresent upstreamSubscriber {
			upstreamSubscriber.unsubscribe();
		}
	}
	
	action reset() {
		ifpresent upstreamSubscriber {
			upstreamSubscriber.unsubscribe();
		}
		publishSubject := publishSubject; // Note: If we want to support: action<> returns ISubject, then we'd do it here (although we might have to add some way to copy subscribers from the old to the new subject)
		upstreamSubscriber := new optional<IObserver>;
		upstreamSubscription := new ISubscription;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		return publishSubject.connectObserver(subscriber);
	}
}
