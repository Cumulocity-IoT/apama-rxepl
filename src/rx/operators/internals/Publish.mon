/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IDisposable;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;

/** @private */
event SubscriberAndSubscription {
	IObserver subscriber;
	Subscription subscription;
}

/** @private */
event PublishSubscriber {
	// Can't store in dictionary need reliable iteration order
	sequence<SubscriberAndSubscription> subscribers;
	action<> onComplete;
	action<> returns boolean isUnsubscribed;
	
	static action create(sequence<SubscriberAndSubscription> subscribers, action<> onComplete, action<> returns boolean isUnsubscribed) returns IObserver {
		PublishSubscriber p := PublishSubscriber(subscribers, onComplete, isUnsubscribed);
		IObserver s := Subscriber.create().onNext(p.next).onError(p.error).onComplete(p.complete).asIObserver();
		return s;
	}
	
	action next(any value) {
		SubscriberAndSubscription ss;
		for ss in subscribers {
			ss.subscriber.next(value);
		}
	}
	
	action error(any e) {
		SubscriberAndSubscription ss;
		for ss in subscribers{
			ss.subscriber.error(e);
		}		
	}
	
	action complete() {
		SubscriberAndSubscription ss;
		sequence<SubscriberAndSubscription> subscribersCopy := new sequence<SubscriberAndSubscription>;
		subscribersCopy.appendSequence(subscribers);
		for ss in subscribersCopy {
			ss.subscriber.complete();
		}
		onComplete();
	}
}

/** @private */
event PublishOnDisconnection {
	sequence<SubscriberAndSubscription> subscribers;
	integer subscriberId;
	
	static action create(sequence<SubscriberAndSubscription> subscribers, integer subscriberId) returns action<> {
		return PublishOnDisconnection(subscribers, subscriberId).onDisconnect;
	}
	
	action onDisconnect() {
		// Subscribers might already have been removed. 
		// Specifically if it is refCounted and we receive a complete because reset is called twice:
		// once by the auto-completing subscriber
		// once by the refCounter triggered by the auto-completing subscriber
		integer idx := 0;
		while idx < subscribers.size() {
			if subscribers[idx].subscriber.getId() = subscriberId {
				subscribers.remove(idx);
				break;
			}
			idx := idx + 1;
		}
	}
}

/** @private */
event PublishHandler {
	action<IObserver> returns ISubscription parentOnConnection;
	IDisposable connection;
	sequence<SubscriberAndSubscription> subscribers;
	ISubscription upstreamSubscription;
	optional<IObserver> upstreamSubscriber;
	boolean isComplete;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, IDisposable connection) returns PublishHandler {
		return PublishHandler(parentOnConnection, connection, new sequence<SubscriberAndSubscription>, new ISubscription, new optional<IObserver>, false);
	}
	
	action connect() returns IDisposable {
		if not isComplete {
			// If there isn't an upstream subscription then create one
			if upstreamSubscriber.empty() {
				upstreamSubscriber := PublishSubscriber.create(subscribers, onComplete, isUnsubscribed);
				connection.onDispose := reset;
				upstreamSubscription := parentOnConnection(upstreamSubscriber.getOrThrow());
			}
		} else {
			SubscriberAndSubscription ss;
			for ss in subscribers {
				ss.subscriber.complete();
			}
		}
		return connection;
	}
	
	action isUnsubscribed() returns boolean {
		return upstreamSubscriber.empty();
	}
	
	action onComplete() {
		isComplete := true;
		ifpresent upstreamSubscriber {
			upstreamSubscriber.unsubscribe();
		}
	}
	
	action reset() {
		ifpresent upstreamSubscriber {
			upstreamSubscriber.unsubscribe();
		}
		upstreamSubscriber := new optional<IObserver>;
		upstreamSubscription := new ISubscription;
		SubscriberAndSubscription ss;
		for ss in subscribers {
			ss.subscription.unsubscribe();
		}
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		// Must create subscription before calling ay next, error, complete
		Subscription downstreamSubscription := Subscription.create(subscriber);
		if not isComplete {
			SubscriberAndSubscription ss := SubscriberAndSubscription(subscriber, downstreamSubscription);
			subscribers.append(ss);
			downstreamSubscription.add(PublishOnDisconnection.create(subscribers, subscriber.getId()));
		} else {
			subscriber.complete();
		}
		return downstreamSubscription.asISubscription();
	}
}
