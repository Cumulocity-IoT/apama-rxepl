/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;
using com.industry.rx_epl.utils.Actions;

/** @private */
event SwitchMapSubscriber {
	IObserver downstreamSubscriber;
	IObserver upstreamSubscriber;
	action<sequence<any> > returns any mapper;
	optional<Subscriber> mappedValueSubscriber;
	
	static action create(IObserver subscriber, action<sequence<any> > returns any mapper) returns IObserver {
		SwitchMapSubscriber m := SwitchMapSubscriber(subscriber, new IObserver, mapper, new optional<Subscriber>);
		subscriber.onUnsubscribe(m.unsubscribeMappedValue);
		m.upstreamSubscriber := Subscriber.create().onNext(m.next).onError(subscriber.error).onComplete(m.completeMain).asIObserver();
		subscriber.subscribe();
		return m.upstreamSubscriber;
	}
	
	action next(any value) {
		try {
			connectToMappedObservable(<IObservable> mapper([value]));
		} catch(Exception e) {
			downstreamSubscriber.error(e);
		}
	}
	
	action completeMain() {
		if mappedValueSubscriber.empty() or not mappedValueSubscriber.getOrThrow().subscribed() {
			downstreamSubscriber.complete();
		}
		upstreamSubscriber.unsubscribe();
	}
	
	action completeSwitched() {
		if not upstreamSubscriber.subscribed() {
			downstreamSubscriber.complete();
		}
		unsubscribeMappedValue();
	}
	
	action connectToMappedObservable(IObservable o) {
		unsubscribeMappedValue();
		mappedValueSubscriber := Subscriber.create().onNext(downstreamSubscriber.next).onError(downstreamSubscriber.error).onComplete(completeSwitched);
		ISubscription discard := o.subscribe(mappedValueSubscriber.getOrThrow());
	}
	
	action unsubscribeMappedValue() {
		ifpresent mappedValueSubscriber {
			mappedValueSubscriber.unsubscribe();
		}
		mappedValueSubscriber := new optional<Subscriber>;
	}
}

/** @private */
event SwitchMapOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	action<sequence<any> > returns any mapper;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, any mapper) returns action<IObserver> returns ISubscription {
		Actions.checkAction(mapper, 1, 0, IObservable.getName());
		return SwitchMapOnConnection(parentOnConnection, Actions.getCoercingGenericAction(mapper, IObservable.getName())).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		IObserver mapSubscriber := SwitchMapSubscriber.create(subscriber, mapper);
		return parentOnConnection(mapSubscriber);
	}
}