/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObservable;

/** @private */
event PausableComplexPipe {
	IObservable trigger;
	
	static action create(IObservable trigger) returns action<IObservable> returns IObservable {
		return PausableComplexPipe(trigger).pausable;
	}
	
	action pausable(IObservable o) returns IObservable {
		IObservable pauser := trigger.startWith([<any>false]).scanWithInitial(invertBool, false);
		return o.withLatestFromToSequence([pauser]).filter(getSecondFromSeq).map(getFirstFromSeq);
	}

	static action invertBool(any bool, any ignore) returns any {
		return not <boolean> bool;
	}
	
	static action getSecondFromSeq(any seq) returns boolean {
		return <boolean> ((<sequence<any> > seq)[1]);
	}
	
	static action getFirstFromSeq(any seq) returns any {
		return (<sequence<any> > seq)[0];
	}
}