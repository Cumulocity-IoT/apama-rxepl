/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;
using com.industry.rx_epl.DisposableStream;

/** @private */
event ToStreamSubscriber {
	IObserver subscriber;
	stream<any> outputStream;
	string channelName;
	integer id;
	
	static action create(stream<any> outputStream, string channelName, integer id, action<> doOnComplete) returns IObserver {
		ToStreamSubscriber t := ToStreamSubscriber(new IObserver, outputStream, channelName, id);
		t.subscriber := Subscriber.create().onNext(t.next).onComplete(doOnComplete).asIObserver();
		return t.subscriber;
	}
	
	action next(any value) {
		route WrappedAnyFromChannel(channelName, id, value);
	}
}

/** @private */
event ToStream {
	IObserver subscriber;
	stream<any> outputStream;
	
	static action create(IObservable observable) returns DisposableStream {
		string channelName := "__ToStream__";
		integer id := integer.getUnique();
		monitor.subscribe(channelName);
		ToStream toStream := ToStream(new IObserver, from a in all WrappedAnyFromChannel(channelName = channelName, uniqueId = id) select a.value);
		toStream.subscriber := ToStreamSubscriber.create(toStream.outputStream, channelName, id, toStream.onComplete);
		ISubscription s := observable.connectObserver(toStream.subscriber);
		return DisposableStream(toStream.outputStream, toStream.dispose);
	}
	
	action dispose() {
		if subscriber.subscribed() {
			subscriber.unsubscribe();
			outputStream.quit();
			log "Stream killed" at DEBUG;
		}
	}
	
	action onComplete() {
		if subscriber.subscribed() {
			subscriber.unsubscribe();
			on wait(0.0) {
				// handle completes async to give any queued values a chance to be received
				outputStream.quit();
				log "Stream killed" at DEBUG;
			}
		}
	}
}