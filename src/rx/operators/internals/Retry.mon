/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;

/** @private */
event RetrySubscription {
	action<IObserver> returns ISubscription parentOnConnection;
	IObserver subscriber; 
	integer retryCount;
	IObserver upstreamSubscriber;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, IObserver subscriber, integer retryCount) returns ISubscription {
		RetrySubscription r := RetrySubscription(parentOnConnection, subscriber, retryCount, new IObserver);
		subscriber.onUnsubscribe(r.unsubscribe);
		subscriber.subscribe();
		return r.createAndConnectUpstream();
	}
	
	action createAndConnectUpstream() returns ISubscription {
		upstreamSubscriber := Subscriber.create().onNext(subscriber.next).onError(onError).onComplete(subscriber.complete).asIObserver();
		return parentOnConnection(upstreamSubscriber);
	}
	
	action onError(any e) {
		retryCount := retryCount - 1;
		if retryCount >= 0 {
			upstreamSubscriber.unsubscribe();
			ISubscription s := createAndConnectUpstream();
		} else {
			subscriber.error(e);
		}
	}
	
	action unsubscribe() {
		upstreamSubscriber.unsubscribe();
	}
}

/** @private */
event RetryOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	integer retryCount;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, integer retryCount) returns action<IObserver> returns ISubscription {
		return RetryOnConnection(parentOnConnection, retryCount).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		return RetrySubscription.create(parentOnConnection, subscriber, retryCount);
	}
}