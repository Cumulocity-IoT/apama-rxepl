/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;
using com.industry.rx_epl.utils.Actions;

/** @private */
event SkipWhileSubscriber {
	IObserver subscriber;
	action<sequence<any> > returns any predicate;
	boolean whileDone;
	
	static action create(IObserver subscriber, action<sequence<any> > returns any predicate) returns IObserver {
		SkipWhileSubscriber s := SkipWhileSubscriber(subscriber, predicate, false);
		return IObserverBuilder.create(subscriber.createUpstream()).onNext(s.next).build();
	}
	
	action next(any value) {
		if whileDone {
			subscriber.next(value);
		} else {
			try {
				if not <boolean> predicate([value]) { 
					whileDone := true;
					subscriber.next(value);
				}
			} catch(Exception e) {
				subscriber.error(e);
			}
		}
	}
}

/** @private */
event SkipWhileOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	action<sequence<any> > returns any predicate;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, any predicate) returns action<IObserver> returns ISubscription {
		Actions.checkAction(predicate, 1, 0, "boolean");
		return SkipWhileOnConnection(parentOnConnection, Actions.getCoercingGenericAction(predicate)).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		return parentOnConnection(SkipWhileSubscriber.create(subscriber, predicate));
	}
}
