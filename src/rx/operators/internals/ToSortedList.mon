/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;
using com.industry.rx_epl.utils.Actions;
using com.industry.rx_epl.utils.Heap;

/** @private */
event HeapsortComparatorWrapper {
	action<sequence<any> > returns any comparator;
	
	static action create(action<sequence<any> > returns any comparator) returns action<any, any> returns boolean {
		return HeapsortComparatorWrapper(comparator).greaterThan;
	}
	
	action greaterThan(any left, any right) returns boolean {
		return (<float>comparator([left, right])) < 0.0;
	}
}

/** @private */
event ToSortedListSubscriber {
	IObserver subscriber;
	action<sequence<any> > returns any comparator;
	sequence<any> values;
	
	static action create(IObserver subscriber, action<sequence<any> > returns any comparator) returns IObserver {
		ToSortedListSubscriber s := ToSortedListSubscriber(subscriber, comparator, new sequence<any>);
		return IObserverBuilder.create(subscriber.createUpstream()).onNext(s.next).onComplete(s.complete).build();
	}
	
	action next(any value) {
		values.append(value);
	}
	
	action complete() {
		try {
			values := Heap.heapsort(values, HeapsortComparatorWrapper.create(comparator));
		} catch(Exception e) {
			subscriber.error(e);
			return;
		}
		subscriber.next(values);
		if subscriber.subscribed() {
			subscriber.complete();
		}
	}
}

/** @private */
event ToSortedListOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	action<sequence<any> > returns any comparator;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, any comparator) returns action<IObserver> returns ISubscription {
		Actions.checkAction(comparator, 2, 0, "float");
		return ToSortedListOnConnection(parentOnConnection, Actions.getCoercingGenericAction(comparator, "float")).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		return parentOnConnection(ToSortedListSubscriber.create(subscriber, comparator));
	}
}
