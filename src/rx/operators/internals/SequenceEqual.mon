/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;

/** @private */
event SequenceEqualSubscriberFactory {
	IObserver downstreamSubscriber;
	integer subscriberCount;
	
	dictionary<integer, sequence<any> > valuesById;
	dictionary<integer, IObserver> upstreamSubscribersById;
	dictionary<integer, boolean> completeSubscribersById;
	
	static action create(IObserver subscriber) returns SequenceEqualSubscriberFactory {
		return SequenceEqualSubscriberFactory(subscriber, 0, new dictionary<integer, sequence<any> >, new dictionary<integer, IObserver>, new dictionary<integer, boolean>);
	}
	
	action createUpstreamSubscriber() returns IObserver {
		integer id := subscriberCount;
		subscriberCount := subscriberCount + 1;
		IObserver o := Subscriber.create().onNext(CombineLatestOnNext.create(id, next)).onError(downstreamSubscriber.error).onComplete(CombineLatestOnComplete.create(id, complete)).asIObserver();
		downstreamSubscriber.onUnsubscribe(o.unsubscribe);
		upstreamSubscribersById.add(id, o);
		return o;
	}
	
	action next(integer id, any value) {
		valuesById.getOrAddDefault(id).append(value);
		
		boolean allObservablesContainValue := valuesById.size() = subscriberCount;
		
		integer valueIndexToCheck := valuesById[id].size() - 1;
		
		sequence<any> nextValues := new sequence<any>;
		integer key;
		for key in valuesById.keys() {
			sequence<any> values := valuesById[key];
			if values.size() > valueIndexToCheck {
				nextValues.append(values[valueIndexToCheck]);
			}
			if allObservablesContainValue {
				values.remove(0);
				if values.size() = 0 {
					valuesById.remove(key);
				}
			}
		}
		
		// Check that all of the values are equal
		any nextValue;
		for nextValue in nextValues {
			if nextValue != nextValues[0] {
				downstreamSubscriber.next(false);
				downstreamSubscriber.complete();
				return;
			}
		}
		
		// Check that one of the observables doesn't now contain more observables than one of the completed ones
		if completeSubscribersById.size() > 0 {
			integer maxSize := valuesById.getOrDefault(completeSubscribersById.keys()[0]).size();
			sequence<any> values;
			for values in valuesById.values() {
				if values.size() > maxSize {
					downstreamSubscriber.next(false);
					downstreamSubscriber.complete();
					return;
				}
			}
		}
	}
	
	action complete(integer id) {
		completeSubscribersById.add(id, true);
		upstreamSubscribersById[id].unsubscribe();
		
		// If all of the subscribers are complete then the sequences were equal
		if completeSubscribersById.size() = subscriberCount {
			downstreamSubscriber.next(true);
			downstreamSubscriber.complete();
			return;
		}
		
		// Check that none of the observables contain more observables than the one that just completed
		integer maxValuesCount := valuesById.getOrDefault(id).size();
		sequence<any> values;
		for values in valuesById.values() {
			if values.size() > maxValuesCount {
				downstreamSubscriber.next(false);
				downstreamSubscriber.complete();
				return;
			}
		}
	}
}

/** @private */
event SequenceEqualOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	sequence<IObservable> observables;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, sequence<IObservable> observables) returns action<IObserver> returns ISubscription {
		return SequenceEqualOnConnection(parentOnConnection, observables).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		SequenceEqualSubscriberFactory factory := SequenceEqualSubscriberFactory.create(subscriber);

		IObserver mainUpstreamObserver := factory.createUpstreamSubscriber();
		sequence<IObserver> upstreamSubscribers := new sequence<IObserver>;
		
		IObservable observable;
		for observable in observables {
			upstreamSubscribers.append(factory.createUpstreamSubscriber());
		}
		
		ISubscription s := Subscription.create(subscriber).asISubscription();
		
		// Connect the main observable
		ISubscription firstConnection := parentOnConnection(mainUpstreamObserver);
		
		// Connect the others
		integer i := 0;
		while i < upstreamSubscribers.size() {
			IObserver upstream := upstreamSubscribers[i];
			ISubscription upstreamSubscription := observables[i].connectObserver(upstream);
			i := i + 1;
		}
		
		return s;
	}
}