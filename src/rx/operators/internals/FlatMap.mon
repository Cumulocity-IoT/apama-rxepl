/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.ISubject;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;
using com.industry.rx_epl.utils.Utils;
using com.industry.rx_epl.utils.Actions;

/** @private */
event FlatMapSubscriber {
	IObserver downstreamSubscriber;
	IObserver upstreamSubscriber;
	action<sequence<any> > returns any mapper;
	dictionary<integer, Subscriber> mappedValueSubscribersById;
	integer id;
	
	static action create(IObserver subscriber, action<sequence<any> > returns any mapper) returns IObserver {
		FlatMapSubscriber m := FlatMapSubscriber(subscriber, new IObserver, mapper, new dictionary<integer, Subscriber>, 0);
		m.upstreamSubscriber := Subscriber.create().onNext(m.next).onError(subscriber.error).onComplete(m.mainComplete).asIObserver();
		subscriber.subscribe();
		subscriber.onUnsubscribe(m.unsubscribe);
		return m.upstreamSubscriber;
	}
	
	action next(any value) {
		try {
			switch (mapper([value]) as values) {
				case IObservable: {
					connectToMappedObservable(values);
				}
				case ISubject: {
					connectToMappedObservable(values.asIObservable());
				}
				default: {
					any value;
					for value in Utils.anyToSequenceAny(values) {
						downstreamSubscriber.next(value);
						if not downstreamSubscriber.subscribed() {
							break;
						}
					}
				}
			}
		} catch(Exception e) {
			downstreamSubscriber.error(e);
		}
	}
	
	action mappedValueComplete(integer id) {
		mappedValueSubscribersById[id].unsubscribe();
		mappedValueSubscribersById.remove(id);
		if not upstreamSubscriber.subscribed() and mappedValueSubscribersById.size() = 0 and downstreamSubscriber.subscribed() {
			downstreamSubscriber.complete();
		}
	}
	
	action mainComplete() {
		upstreamSubscriber.unsubscribe();
		if mappedValueSubscribersById.size() = 0 and downstreamSubscriber.subscribed() {
			downstreamSubscriber.complete();
		}
	}
	
	action unsubscribe() {
		upstreamSubscriber.unsubscribe();
		Subscriber s;
		for s in mappedValueSubscribersById.values() {
			s.unsubscribe();
		}
	}
	
	action connectToMappedObservable(IObservable o) {
		Subscriber mappedValueSubscriber := Subscriber.create().onNext(downstreamSubscriber.next).onError(downstreamSubscriber.error).onComplete(CombineLatestOnComplete.create(id, mappedValueComplete));
		mappedValueSubscribersById.add(id, mappedValueSubscriber);
		id := id + 1;
		ISubscription discard := o.subscribe(mappedValueSubscriber);
	}
}

/** @private */
event FlatMapOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	action<sequence<any> > returns any mapper;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, any mapper) returns action<IObserver> returns ISubscription {
		Actions.checkAction(mapper, 1, 0, "any");
		return FlatMapOnConnection(parentOnConnection, Actions.getCoercingGenericAction(mapper, "any")).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		IObserver mapSubscriber := FlatMapSubscriber.create(subscriber, mapper);
		return parentOnConnection(mapSubscriber);
	}
}