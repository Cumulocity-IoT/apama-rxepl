/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;
using com.industry.rx_epl.WrappedAny;
using com.industry.rx_epl.utils.Utils;


/** @private */
event WrappedAnyFromChannel {
	string channelName;
	integer uniqueId;
	any value;
}

/** @private */
event KillValueWrapper {}

/** @private */
event FromChannelOnDisconnection {
	listener channelListener;
	context valueWrappingContext;
	
	static action create(listener channelListener, context valueWrappingContext) returns action<> {
		return FromChannelOnDisconnection(channelListener, valueWrappingContext).onDisconnection;
	}
	
	action onDisconnection() {
		channelListener.quit();
		send KillValueWrapper() to valueWrappingContext;
		log "Channel listener killed" at DEBUG;
	}
}


/** @private */
event FromChannelOnConnection {
	string channelName;
	
	static action create(string channelName) returns action<IObserver> returns ISubscription {
		return FromChannelOnConnection(channelName).onConnection;
	}
	
	/**
	 * Starts a new context to receive values only from a single channel, wraps them and sends them back to the spawning context
	 */
	action onConnection(IObserver subscriber) returns ISubscription {
		// Needs a uniqueId so that fromChannel can be called multiple times from the same context
		integer uniqueId := integer.getUnique();
		listener fromChannelListener := on all WrappedAnyFromChannel(channelName = channelName, uniqueId = uniqueId) as wrappedValue {
			subscriber.next(wrappedValue.value);
		}
		
		context valueWrappingContext := context("FromChannelValueWrapper");
		spawn channelValueWrapper(channelName, context.current(), uniqueId) to valueWrappingContext;
		
		// Start a temporary listener to await the starting of the context
		
		
		subscriber.onUnsubscribe(FromChannelOnDisconnection.create(fromChannelListener, valueWrappingContext));
		return Subscription.create(subscriber).asISubscription();
	}
	
	static action channelValueWrapper(string channelName, context parentContext, integer uniqueId) {
		monitor.subscribe(channelName);
		on all any() as anyValue and not KillValueWrapper() {
			switch(anyValue) {
				case WrappedAny : {
					send WrappedAnyFromChannel(channelName, uniqueId, anyValue.value) to parentContext;
				}
				default : {
					send  WrappedAnyFromChannel(channelName, uniqueId, anyValue) to parentContext;
				}
			}
		}
	}
}