/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.IDisposable;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscriber;

/** @private */
event Spawned {
	string channel;
}

/*
 * Spawns a worker context on first connection and discards after the subscriber count reaches 0, recreating if anyone connects later
*/
/** @private */
event PipeOnOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	string upstreamChannel;
	string downstreamChannel;
	context otherContext;
	sequence<action<action<IObserver> returns ISubscription> returns action<IObserver> returns ISubscription> pipeModifiers;
	optional<IDisposable> upstream;
	boolean spawned;
	boolean spawning;
	integer subscriberCount;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, context otherContext, sequence<action<action<IObserver> returns ISubscription> returns action<IObserver> returns ISubscription> pipeModifiers) returns action<IObserver> returns ISubscription {
		string uniqueId := integer.getUnique().toString();
		PipeOnOnConnection o := PipeOnOnConnection(parentOnConnection, "PipeOnUpstreamChannel" + uniqueId, "PipeOnDownstreamChannel" + uniqueId, otherContext, pipeModifiers, new optional<IDisposable>, false, false, 0);
		return o.onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		if upstream.empty() {
			upstream := ObserveToHandler.create(parentOnConnection, upstreamChannel);
		}
		
		subscriber.onUnsubscribe(decrementSubscriberCountAndDisposeIfNecessary);
		subscriberCount := subscriberCount + 1;
		
		if not spawned and not spawning {
			spawning := true;
			monitor.subscribe(downstreamChannel); // Need to subscribe before spawning otherwise the spawned context could send Spawned() before we have subscribed
			spawnToContext(downstreamChannel);
		}
		if spawning {
			monitor.subscribe(downstreamChannel);
			on Spawned(channel = downstreamChannel) {
				spawning := false;
				spawned := true;
				ISubscription s := (<action<string> returns IObservable> any.newInstance("com.industry.rx_epl.Observable").getAction("observeFromChannel"))(downstreamChannel).connectObserver(subscriber);
			}
		} else {
			ISubscription s := (<action<string> returns IObservable> any.newInstance("com.industry.rx_epl.Observable").getAction("observeFromChannel"))(downstreamChannel).connectObserver(subscriber);
		}
		
		return Subscription.create(subscriber).asISubscription();
	}
	
	action decrementSubscriberCountAndDisposeIfNecessary() {
		subscriberCount := subscriberCount - 1;
		disposeIfNecessary();
	}
	
	action disposeIfNecessary() {
		if spawning {
			on wait(1.0) {
				disposeIfNecessary();
			}
			return;
		}
		if subscriberCount = 0 {
			ifpresent upstream {
				upstream.dispose();
			}
			upstream := new optional<IDisposable>;
			
			if spawned {
				send Dispose(downstreamChannel) to downstreamChannel;
			}
			spawned := false;
		}
	}
	
	action spawnToContext(string downstreamChannel) {
		spawn runOnOtherContext(downstreamChannel) to otherContext;
	}
	
	action runOnOtherContext(string downstreamChannel) {
		IDisposable disposable := (<action<string> returns IObservable> any.newInstance("com.industry.rx_epl.Observable").getAction("observeFromChannel"))(upstreamChannel)
			.pipe(pipeModifiers)
			.observeToChannel(downstreamChannel);
		send Spawned(downstreamChannel) to downstreamChannel;
	}
}