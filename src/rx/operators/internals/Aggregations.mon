/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.utils.Utils;

/** @private */
event Aggregations {
	static action count(any currentCount, any value) returns any {
		return (<integer>currentCount) + 1;
	}

	// Always returns a float
	static action sum(any currentSum, any value) returns any {
		return Utils.numberToFloat(currentSum) + Utils.numberToFloat(value);
	}

	static action sumInteger(any currentSum, any value) returns any {
		integer sum := <integer> currentSum;
		return sum + <integer> value;
	}

	static action sumFloat(any currentSum, any value) returns any {
		float sum := <float> currentSum;
		return sum + <float> value;
	}

	static action sumDecimal(any currentSum, any value) returns any {
		decimal sum := <decimal> currentSum;
		return sum + <decimal> value;
	}
	
	static action concatString(any currentStr, any value) returns any {
		string concat := <string> currentStr;
		switch(value) {
			case string: {
				return concat + value;
			}
			default: {
				return concat + value.valueToString();
			}
		}
	}
	
	// Always returns a float
	static action max(any currentMax, any value) returns any {
		return float.max(Utils.numberToFloat(currentMax), Utils.numberToFloat(value));
	}

	static action maxInteger(any currentMax, any value) returns any {
		return integer.max(<integer> currentMax, <integer> value);
	}

	static action maxFloat(any currentMax, any value) returns any {
		return float.max(<float> currentMax, <float> value);
	}

	static action maxDecimal(any currentMax, any value) returns any {
		return decimal.max(<decimal> currentMax, <decimal> value);
	}
	
	// Always returns a float
	static action min(any currentMin, any value) returns any {
		return float.min(Utils.numberToFloat(currentMin), Utils.numberToFloat(value));
	}

	static action minInteger(any currentMin, any value) returns any {
		return integer.min(<integer> currentMin, <integer> value);
	}

	static action minFloat(any currentMin, any value) returns any {
		return float.min(<float> currentMin, <float> value);
	}

	static action minDecimal(any currentMin, any value) returns any {
		return decimal.min(<decimal> currentMin, <decimal> value);
	}
}