/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;
using com.industry.rx_epl.utils.Utils;

/** @private */
event BufferCountSubscriber {
	IObserver subscriber;
	sequence<any> buffer;
	integer count;
	integer skip;
	integer remainingToSkip;
	
	static action create(IObserver subscriber, integer count, integer skip) returns IObserver {
		if skip <= 0 {
			throw Exception("skip must be > 0", "IllegalArgumentException");
		}
		BufferCountSubscriber b := BufferCountSubscriber(subscriber, new sequence<any>, count, skip, 0);
		return IObserverBuilder.create(subscriber.createUpstream()).onNext(b.next).onComplete(b.complete).build();
	}
	
	action next(any value) {
		if remainingToSkip = 0 {
			buffer.append(value);
			if buffer.size() = count {
				emitBuffer();
			}
		} else {
			remainingToSkip := remainingToSkip - 1;
		}
	}
	
	action emitBuffer() {
		sequence<any> newBuffer := new sequence<any>;
		newBuffer.appendSequence(buffer);
		subscriber.next(buffer);
		remainingToSkip := skip;
		while remainingToSkip > 0 and newBuffer.size() > 0 {
			newBuffer.remove(0);
			remainingToSkip := remainingToSkip - 1;
		}
		buffer := newBuffer;
	}
	
	action complete() {
		while buffer.size() > 0 {
			if subscriber.subscribed() {
				emitBuffer();
			} else {
				break;
			}
		}
		if subscriber.subscribed() {
			subscriber.complete();
		}
	}
}

/** @private */
event BufferCountOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	integer count;
	integer skip;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, integer count, integer skip) returns action<IObserver> returns ISubscription {
		return BufferCountOnConnection(parentOnConnection, count, skip).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		return parentOnConnection(BufferCountSubscriber.create(subscriber, count, skip));
	}
}
