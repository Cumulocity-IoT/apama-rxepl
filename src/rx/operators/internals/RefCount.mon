/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;
using com.industry.rx_epl.IDisposable;

/** @private */
event RefCountOnConnection {
	IDisposable connection;
	action<> returns IDisposable connect;
	action<IObserver> returns ISubscription parentOnConnection;
	integer refCount;
	
	static action create(IDisposable connection, action<> returns IDisposable connect, action<IObserver> returns ISubscription parentOnConnection) returns action<IObserver> returns ISubscription {
		return RefCountOnConnection(connection, connect, parentOnConnection, 0).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		refCount := refCount + 1;
		subscriber.onUnsubscribe(decrementRefCount);
		ISubscription subscription := parentOnConnection(subscriber);
		if connection.disposed() {
			connection := connect();
		}
		return subscription;
	}
	
	action decrementRefCount() {
		refCount := refCount - 1;
		if refCount = 0 {
			if not connection.disposed() {
				connection.dispose();
			}
		}
	}
}