/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;
using com.industry.rx_epl.utils.Utils;

/** @private */
event BufferTimeOrCountSubscriberFactory {
	IObserver subscriber;
	IObserver upstream;
	float duration;
	sequence<any> buffer;
	float lastEmitTimestamp;
	integer count;
	listener timeListener;
	
	static action create(IObserver subscriber, float duration, integer count) returns BufferTimeOrCountSubscriberFactory {
		return BufferTimeOrCountSubscriberFactory(subscriber, new IObserver, duration, new sequence<any>, -float.INFINITY, count, new listener);
	}
	
	action next(any value) {
		buffer.append(value);
		if buffer.size() = count {
			emitBuffer();
		}
	}
	
	action complete() {
		// Don't emit empty bucket if we already emitted at this timestamp
		if lastEmitTimestamp != currentTime or buffer.size() > 0 {
			if subscriber.subscribed() {
				emitBuffer();
			}
		}
		timeListener.quit();
		if subscriber.subscribed() {
			subscriber.complete();
		}
	}
	
	action emitBuffer() {
		lastEmitTimestamp := currentTime;
		subscriber.next(buffer);
		buffer := new sequence<any>;
		createTimeListener();
	}
	
	action createTimeListener() {
		ifpresent timeListener {
			timeListener.quit();
		}
		timeListener := on wait(duration) {
			emitBuffer();
		}
	}
	
	action getUpstream() returns IObserver {
		return IObserverBuilder.create(subscriber.createUpstream()).onNext(next).onComplete(complete).build();
	}
}

/** @private */
event BufferTimeOrCountOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	float duration;
	integer count;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, float duration, integer count) returns action<IObserver> returns ISubscription {
		return BufferTimeOrCountOnConnection(parentOnConnection, duration, count).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		BufferTimeOrCountSubscriberFactory factory := BufferTimeOrCountSubscriberFactory.create(subscriber, duration, count);
		ISubscription s := parentOnConnection(factory.getUpstream());
		if subscriber.subscribed() {
			factory.createTimeListener();
		}
		return s;
	}
}