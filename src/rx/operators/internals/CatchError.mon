/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;
using com.industry.rx_epl.utils.Utils;

/** @private */
event CatchErrorSubscriber {
	IObserver downstreamSubscriber;
	IObservable catchObservable;
	IObserver upstreamSubscriber;
	
	static action create(IObserver subscriber, IObservable catchObservable) returns IObserver {
		CatchErrorSubscriber c := CatchErrorSubscriber(subscriber, catchObservable, new IObserver);
		subscriber.onUnsubscribe(c.unsubscribe);
		c.upstreamSubscriber := Subscriber.create().onNext(subscriber.next).onError(c.onError).onComplete(subscriber.complete).asIObserver();
		subscriber.subscribe();
		return c.upstreamSubscriber;
	}
	
	action onError(any e) {
		upstreamSubscriber.unsubscribe();
		upstreamSubscriber := downstreamSubscriber.createUpstream();
		ISubscription s := catchObservable.connectObserver(upstreamSubscriber);
	}
	
	action unsubscribe() {
		upstreamSubscriber.unsubscribe();
	}
}

/** @private */
event CatchErrorOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	IObservable catchObservable;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, IObservable catchObservable) returns action<IObserver> returns ISubscription {
		return CatchErrorOnConnection(parentOnConnection, catchObservable).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		return parentOnConnection(CatchErrorSubscriber.create(subscriber, catchObservable));
	}
}