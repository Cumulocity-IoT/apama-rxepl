/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;
using com.industry.rx_epl.utils.Actions;

/** @private */
event ScanSubscriber {
	IObserver subscriber;
	action<sequence<any> > returns any scanner;
	any accumulator;
	boolean scanValue;
	
	static action create(IObserver subscriber, action<sequence<any> > returns any scanner, any initialValue, boolean scanFirstValue) returns IObserver {
		ScanSubscriber m := ScanSubscriber(subscriber, scanner, initialValue, scanFirstValue);
		return IObserverBuilder.create(subscriber.createUpstream()).onNext(m.next).build();
	}
	
	action next(any value) {
		if scanValue {
			try {
				accumulator := scanner([accumulator, value]);
				subscriber.next(accumulator);
			} catch(Exception e) {
				subscriber.error(e);
			}
		} else {
			scanValue := true;
			accumulator := value;
			subscriber.next(value);
		}
	}
}

/** @private */
event ScanOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	action<sequence<any> > returns any scanner;
	any initialValue;
	boolean hasInitialValue;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, any scanner, any initialValue, boolean hasInitialValue) returns action<IObserver> returns ISubscription {
		Actions.checkAction(scanner, 2, 0, "any");
		return ScanOnConnection(parentOnConnection, Actions.getCoercingGenericAction(scanner), initialValue, hasInitialValue).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		IObserver mapSubscriber := ScanSubscriber.create(subscriber, scanner, initialValue, hasInitialValue);
		return parentOnConnection(mapSubscriber);
	}
}