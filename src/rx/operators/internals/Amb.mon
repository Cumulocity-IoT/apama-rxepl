/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;


/** @private */
event AmbSubscriberFactory {
	IObserver downstreamSubscriber;	
	boolean receivedValue;
	
	dictionary<integer, IObserver> upstreamSubscribersById;
	
	static action create(IObserver subscriber) returns AmbSubscriberFactory {
		return AmbSubscriberFactory(subscriber, false, new dictionary<integer, IObserver>);
	}
	
	action createUpstreamSubscriber() returns IObserver {
		integer id := upstreamSubscribersById.size();
		IObserver o := Subscriber.create().onNext(CombineLatestOnNext.create(id, next)).onError(downstreamSubscriber.error).onComplete(downstreamSubscriber.complete).asIObserver();
		downstreamSubscriber.onUnsubscribe(o.unsubscribe);
		upstreamSubscribersById.add(id, o);
		return o;
	}
	
	action next(integer id, any value) {
		if not receivedValue {
			receivedValue := true;
			integer otherId;
			for otherId in upstreamSubscribersById.keys() {
				if otherId != id {
					upstreamSubscribersById[otherId].unsubscribe();
					upstreamSubscribersById.remove(otherId);
				}
			}
		}
		downstreamSubscriber.next(value);
	}
}

/** @private */
event AmbOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	sequence<IObservable> observables;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, sequence<IObservable> observables) returns action<IObserver> returns ISubscription {
 		return AmbOnConnection(parentOnConnection, observables).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		AmbSubscriberFactory factory := AmbSubscriberFactory.create(subscriber);

		IObserver mainUpstreamObserver := factory.createUpstreamSubscriber();
		sequence<IObserver> upstreamSubscribers := new sequence<IObserver>;
		
		IObservable observable;
		for observable in observables {
			upstreamSubscribers.append(factory.createUpstreamSubscriber());
		}
		
		ISubscription s := Subscription.create(subscriber).asISubscription();
		
		// Connect the main observable
		ISubscription firstConnection := parentOnConnection(mainUpstreamObserver);
		
		if factory.receivedValue or not subscriber.subscribed() {
			return s;
		}
		
		// Connect the others
		integer i := 0;
		while i < upstreamSubscribers.size() {
			IObserver upstream := upstreamSubscribers[i];
			ISubscription upstreamSubscription := observables[i].connectObserver(upstream);
			if factory.receivedValue or not subscriber.subscribed() {
				return s;
			}
			i := i + 1;
		}
		
		return s;
	}
}