/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IDisposable;
using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;

/** @private */
event Connect {
	string channel;
	string connectionId;
}

/** @private */
event Next {
	string channel;
	string connectionId;
	any value;
}

/** @private */
event Error {
	string channel;
	string connectionId;
	any error;
}

/** @private */
event Complete {
	string channel;
	string connectionId;
}

/** @private */
event Dispose {
	string channel;
}

/** @private */
event Unsubscribe {
	string channel;
	string connectionId;
}

/** @private */
event ObserveToChannelSubscriber {
	string channel;
	string connectionId;
	IObserver subscriber;
	
	static action create(string channel, string connectionId) returns IObserver {
		ObserveToChannelSubscriber s := ObserveToChannelSubscriber(channel, connectionId, new IObserver);
		s.subscriber := Subscriber.create().onNext(s.next).onError(s.error).onComplete(s.complete).asIObserver();
		return s.subscriber;
	}

	action next(any value) {
		send Next(channel, connectionId, value) to channel;
	}
	action error(any e) {
		send Error(channel, connectionId, e) to channel;
		subscriber.unsubscribe();
	}
	action complete() {
		send Complete(channel, connectionId) to channel;
		subscriber.unsubscribe();
	}
}

/** @private */
event ObserveToHandler {
	action<IObserver> returns ISubscription parentOnConnect;
	string channel;
	
	static action create(action<IObserver> returns ISubscription parentOnConnect, string channel) returns IDisposable {
		ObserveToHandler p := ObserveToHandler(parentOnConnect, channel);
		monitor.subscribe(channel);
		return p.init();
	}
	
	action init() returns IDisposable {
		on (all Connect(channel = channel) as connection) and not Dispose(channel = channel) {
			IObserver subscriber := ObserveToChannelSubscriber.create(channel, connection.connectionId);
			on Unsubscribe(channel = channel, connectionId = connection.connectionId) or Dispose(channel = channel) {
				subscriber.unsubscribe();
			}
			ISubscription s := parentOnConnect(subscriber);
		}
		on (Dispose(channel = channel) -> Connect(channel = channel) as connection) and not (Dispose(channel) -> wait(1.0)) {
			sendDispose();
		}
		return IDisposable(sendDispose);
	}
	
	action sendDispose() {
		send Dispose(channel) to channel;
	}
}