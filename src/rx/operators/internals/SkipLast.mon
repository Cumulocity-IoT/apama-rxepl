/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;

/** @private */
event SkipLastSubscriber {
	IObserver subscriber;
	integer count;
	sequence<any> values;
	
	static action create(IObserver subscriber, integer count) returns IObserver {
		SkipLastSubscriber s := SkipLastSubscriber(subscriber, count, new sequence<any>);
		return IObserverBuilder.create(subscriber.createUpstream()).onNext(s.next).build();
	}
	
	action next(any value) {
		values.append(value);
		if values.size() > count {
			any value := values[0];
			values.remove(0);
			subscriber.next(value);
		}
	}
}

/** @private */
event SkipLastOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	integer count;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, integer count) returns action<IObserver> returns ISubscription {
		return SkipLastOnConnection(parentOnConnection, count).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		return parentOnConnection(SkipLastSubscriber.create(subscriber, count));
	}
}