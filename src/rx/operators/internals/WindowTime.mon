/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;
using com.industry.rx_epl.ISubject;

/** @private */
event WindowTimeSubscriber {
	IObserver subscriber;
	ISubject currentSubject;
	listener windowCreationListener;
	float windowDuration;
	
	static action create(IObserver subscriber, float windowDuration) returns IObserver {
		WindowTimeSubscriber m := WindowTimeSubscriber(subscriber, new ISubject, new listener, windowDuration);
		subscriber.onUnsubscribe(m.unsubscribe);
		m.startTimeWindowCreationListener();
		return IObserverBuilder.create(subscriber.createUpstream()).onNext(m.next).build();
	}
	
	action next(any value) {
		currentSubject.next(value);
	}
	
	action createNextSubject() {
		currentSubject := (<action<> returns ISubject> any.newInstance("com.industry.rx_epl.Subject").getAction("create"))();
		subscriber.next(currentSubject.asIObservable());
	}
	
	action unsubscribe() {
		log "TimeWindow listener killed" at DEBUG;
		windowCreationListener.quit();
		currentSubject.complete();
	}
	
	action startTimeWindowCreationListener() {
		createNextSubject();
		windowCreationListener := on all wait(windowDuration) {
			currentSubject.complete();
			createNextSubject();
		}
	}
}

/** @private */
event WindowTimeOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	float windowDuration;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, float windowDuration) returns action<IObserver> returns ISubscription {
		return WindowTimeOnConnection(parentOnConnection, windowDuration).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		return parentOnConnection(WindowTimeSubscriber.create(subscriber, windowDuration));
	}
}