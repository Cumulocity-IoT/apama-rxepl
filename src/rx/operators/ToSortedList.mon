/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package com.industry.rx_epl.operators;

using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.ISubscription;

using com.industry.rx_epl.operators.internals.ToSortedListOnConnection;

using com.apama.exceptions.Exception;

event ToSortedList {
	any comparator;
	
	static action create(any comparator) returns action<action<IObserver> returns ISubscription> returns action<IObserver> returns ISubscription {
		return ToSortedList(comparator).pipeModifier;
	}

	action pipeModifier(action<IObserver> returns ISubscription onConnection) returns action<IObserver> returns ISubscription {
		return ToSortedListOnConnection.create(onConnection, comparator);
	}
}

event ToSortedListAsc {
	static action create() returns action<action<IObserver> returns ISubscription> returns action<IObserver> returns ISubscription {
		return ToSortedList.create(ascComparator);
	}
	
	/** @private */
	static action ascComparator(any left, any right) returns float {
		try {
			if left > right {
				return -1.0;
			} else {
				return 1.0;
			}
		} catch(Exception e) {
			throw Exception("Cannot compare: " + left.toString() + ", " + right.toString() + "\n" + e.getMessage(), "IllegalArgumentException");
		}
	}
}

event ToSortedListDesc {
	static action create() returns action<action<IObserver> returns ISubscription> returns action<IObserver> returns ISubscription {
		return ToSortedList.create(descComparator);
	}
	
	/** @private */
	static action descComparator(any left, any right) returns float {
		try {
			if left > right {
				return 1.0;
			} else {
				return -1.0;
			}
		} catch(Exception e) {
			throw Exception("Cannot compare: " + left.toString() + ", " + right.toString() + "\n" + e.getMessage(), "IllegalArgumentException");
		}
	}
}

event Sort {
	any comparator;
	
	static action create(any comparator) returns action<action<IObserver> returns ISubscription> returns action<IObserver> returns ISubscription {
		return Pipe.create([ToSortedList.create(comparator), MergeAll.create()]);
	}
}

event SortAsc {
	static action create() returns action<action<IObserver> returns ISubscription> returns action<IObserver> returns ISubscription {
		return Sort.create(ToSortedListAsc.ascComparator);
	}
}

event SortDesc {
	static action create() returns action<action<IObserver> returns ISubscription> returns action<IObserver> returns ISubscription {
		return Sort.create(ToSortedListDesc.descComparator);
	}
}