/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package com.industry.rx_epl.operators;

using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.ISubscription;

using com.industry.rx_epl.operators.internals.DistinctByOnConnection;
using com.industry.rx_epl.operators.internals.DistinctByUntilChangedOnConnection;
using com.industry.rx_epl.operators.internals.PluckMapper;

event DistinctBy {
	any by;
	
	static action create(any by) returns action<action<IObserver> returns ISubscription> returns action<IObserver> returns ISubscription {
		return DistinctBy(by).pipeModifier;
	}

	action pipeModifier(action<IObserver> returns ISubscription onConnection) returns action<IObserver> returns ISubscription {
		return DistinctByOnConnection.create(onConnection, by);
	}	
}

event Distinct {	
	static action create() returns action<action<IObserver> returns ISubscription> returns action<IObserver> returns ISubscription {
		return DistinctBy.create(new action<any> returns any);
	}
}

event DistinctByField {
	static action create(any fieldName) returns action<action<IObserver> returns ISubscription> returns action<IObserver> returns ISubscription {
		return DistinctBy.create(PluckMapper.create(fieldName));
	}	
}

event DistinctByUntilChanged {
	any by;
	
	static action create(any by) returns action<action<IObserver> returns ISubscription> returns action<IObserver> returns ISubscription {
		return DistinctByUntilChanged(by).pipeModifier;
	}

	action pipeModifier(action<IObserver> returns ISubscription onConnection) returns action<IObserver> returns ISubscription {
		return DistinctByUntilChangedOnConnection.create(onConnection, by);
	}	
}

event DistinctUntilChanged {	
	static action create() returns action<action<IObserver> returns ISubscription> returns action<IObserver> returns ISubscription {
		return DistinctByUntilChanged.create(new action<any> returns any);
	}
}

event DistinctByFieldUntilChanged {
	static action create(any fieldName) returns action<action<IObserver> returns ISubscription> returns action<IObserver> returns ISubscription {
		return DistinctByUntilChanged.create(PluckMapper.create(fieldName));
	}
}