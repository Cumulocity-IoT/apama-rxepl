/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package com.industry.rx_epl;

using com.apama.exceptions.Exception;

event IObserverId {
	integer id;
	
	static action create() returns action<> returns integer {
		return IObserverId(integer.getUnique()).get;
	}
	
	action get() returns integer {
		return id;
	}
}

event IObserver {
	any observer;
	
	action<> returns integer getId;
	
	action<any> next;
	action<any> error;
	action<> complete;
	
	action<action<> > onUnsubscribe;
	action<> unsubscribe;
	action<> returns boolean subscribed;
	action<> subscribe;
	
	action disconnect() {
		next := noOpNext;
		error := noOpError;
		complete := noOpComplete;
	}
	
	static action noOpNext(any value) {}
	static action noOpError(any e) {}
	static action noOpComplete() {}
	
	action createUpstream() returns IObserver {
		IObserver upstream := IObserver(self, IObserverId.create(), next, error, complete, onUnsubscribe, unsubscribe, subscribed, subscribe);
		return upstream;
	}
}
