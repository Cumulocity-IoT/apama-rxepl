/* 
* Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package com.industry.rx_epl;

event IObservable {
	any observable;

	action<IObserver> returns ISubscription connectObserver;
	/**
	 * Subscribe to the output of an observable. <br><br>
	 * Params: <br>
	 * &emsp;subscriber <br>
	 * Returns: a subscription to allow the subscription to be terminated
	 */
	action<Subscriber> returns ISubscription subscribe;
	/**
	 * Apply a mapping function to each item and pass on the result from the mapping. <br><br>
	 * Params: <br>
	 * &emsp;mapper - The mapping function <br>
	 * Returns: An observable of mapped values
	 * @see flatMap Map to multiple items which are merged into the output
	 */
	action<any> returns IObservable map;
	/**
	 * Publish will connect once to the upstream observable and send any values to all downstream subscribers. <br>
	 * Note: The upstream is only connected to when connect() is called.<br><br>
	 * Output: A connectable observable of any values
	 * @see #connect Call this on the resulting observable to trigger connection by the published observable to the source
	 * @see #refCount Automatically connect and disconnect
	 * @see #share Shorthand for publish().refCount()
	 */
	action<> returns IObservable publish;
	/**
	 * Called on a published observable to connect it to the source. <br><br>
	 * Returns: a disposable to allow disconnection
	 * @see #publish Create a published observable
	 * @see #refCount Automatically connect and disconnect
	 */
	action<> returns IDisposable connect;
	/**
	 * Called on a published observable to automatically connect when a subscriber connects and disconnect when all subscribers disconnect. <br><br>
	 * Returns: A refCounted Observable of any values
	 * @see #publish Create a published observable
	 * @see #refCount Automatically connect and disconnect
	 * @see #share Shorthand for publish().refCount()
	 */
	action<> returns IObservable refCount;
	/**
	 * A shorthand utility for publish().refCount(). <br><br>
	 * Returns: A refCounted Observable of any values
	 * @see #publish Create a published observable
	 * @see #refCount Automatically connect and disconnect
	 */
	action<> returns IObservable share;	
	/**
	 * Take only the first N values. <br><br>
	 * Params: <br>
	 * &emsp;count - The number of items to take <br>
	 * Returns: An observable of any values
	 * @see #takeLast Take the last N items
	 * @see #skip Skip the first N items
	 */
	action<integer> returns IObservable take;
	/**
	 * Take only the last N values. <br><br>
	 * Params: <br>
	 * &emsp;count - The number of items to take <br>
	 * Returns: An observable of any values
	 * @see #take Take the first N items
	 * @see #skipLast Skip the last N items
	 */
	action<integer> returns IObservable takeLast;
	/**
	 * Take only the first value. <br><br>
	 * Returns: An observable of at most one value
	 * @see #last Take the last item
	 * @see #take Take the first N items
	 */
	action<> returns IObservable first;
	/**
	 * Take only the last value. <br><br>
	 * Returns: An observable of at most one value
	 * @see #first Take the first item
	 * @see #takeLast Take the last N items
	 */
	action<> returns IObservable last;
	/**
	 * Skip the first N values. <br><br>
	 * Params: <br>
	 * &emsp;count - The number of items to skip <br>
	 * Returns: An observable of any values
	 * @see #take Take the first N items
	 * @see #skipLast Skip the last N items
	 */
	action<integer> returns IObservable skip;
	/**
	 * Skip the last N values. <br><br>
	 * Params: <br>
	 * &emsp;count - The number of items to skip <br>
	 * Returns: An observable of any values
	 * @see #skip Skip the first N items
	 * @see #take Take the first N items
	 */
	action<integer> returns IObservable skipLast;
	/**
	 * Filter values by a predicate. <br><br>
	 * Params: <br>
	 * &emsp;predicate - The predicate to use to filter <br>
	 * Returns: An observable of any values
	 */
	action<any> returns IObservable filter;
	/**
	 * Aggregate the data and emit the aggregated value for every incoming event. <br>
	 * Note: The first value is emitted without aggregation<br><br>
	 * Params: <br>
	 * &emsp;scanner - The function to calculate the aggregated value (The first argument is the accumulator, the second is the incoming value) <br>
	 * Returns: An observable of aggregated values
	 * @see #scanWithInitial The same but with an initial value for the accumulator
	 * @see #reduce Aggregate the data but only emit the final value
	 */
	action<any> returns IObservable scan;
	/**
	 * Aggregate the data and emit the aggregated value for every incoming event. The initial value for the aggregation is supplied.<br><br>
	 * Params: <br>
	 * &emsp;scanner - The function to calculate the aggregated value (The first argument is the accumulator, the second is the incoming value) <br>
	 * &emsp;initialValue - The initial value for the accumulator <br>
	 * Returns: An observable of aggregated values
	 * @see #scan The same but use the first value as the initial value for the aggregate
	 * @see #reduceWithInitial Aggregate the data but only emit the final value
	 */
	action<any, any> returns IObservable scanWithInitial;
	/**
	 * Only emit items that haven't previously been seen.<br><br>
	 * Returns: An observable of unique values
	 * @see #distinctBy Only emit items where a the result of a function is unique
	 */
	action<> returns IObservable distinct;
	/**
	 * Only emit items where the result of a function hasn't previously been seen.<br><br>
	 * Params: <br>
	 * &emsp;by - The function to get a value that should be unique<br>
	 * Returns: An observable of unique values
	 * @see #distinct Only emit items that haven't previously been seen
	 */
	action<any> returns IObservable distinctBy;
	/**
	 * Combine this observable with one or more others, emitting the combination whenever any update.<br><br>
	 * Params: <br>
	 * &emsp;otherObservables - The other observables to combine with<br>
	 * &emsp;combiner - The function to use to combine the values<br>
	 * Returns: An observable of combined values
	 * @see #withLatestFrom Similar, but emits only when this observable emits
	 */
	action<sequence<IObservable>, action<sequence<any> > returns any> returns IObservable combineLatest;
	/**
	 * Combine this observable with one or more others, emitting the combination whenever this observable recevies a value.<br><br>
	 * Params: <br>
	 * &emsp;otherObservables - The other observables to combine with<br>
	 * &emsp;combiner - The function to use to combine the values<br>
	 * Returns: An observable of combined values
	 * @see #combineLatest Similar, but emits when any observable emits
	 */
	action<sequence<IObservable>, action<sequence<any> > returns any> returns IObservable withLatestFrom;	
	/**
	 * Delay each value by a fixed amount of time.<br><br>
	 * Params: <br>
	 * &emsp;duration - The amount of time to delay by<br>
	 * Returns: An observable of delayed values
	 */
	action<float> returns IObservable delay;
	/**
	 * Convert a synchronous observable into an asynchronous one. <br>
	 * Also used to separate a observable from a subscribeOnCall<br><br>
	 * Returns: An observable of any values
	 */
	action<> returns IObservable async;
	/**
	 * Inspect the values in an observable chain. <br><br>
	 * Note: Won't emit values unless a downstream subscriber is connected<br>
	 * Params: <br>
	 * &emsp;subscriber - the subscriber to use to inspect the values <br>
	 * Returns: An observable of any values
	 * @see #subscribe Subscribing to an observable
	 */
	action<Subscriber> returns IObservable do;
	/**
	 * The same functionality as publish, with the added feature of replaying a certain number of missed items to new subscribers.<br><br>
	 * Params: <br>
	 * &emsp;count - The maximum number of items to replay<br>
	 * Returns: A connectable observable of any values
	 * @see #publish Publishing an observable
	 * @see #shareReplay shorthand for publishReplay().refCount()
	 */
	action<integer> returns IObservable publishReplay;
	/**
	 * Shorthand for publishReplay().refCount().<br><br>
	 * Params: <br>
	 * &emsp;count - The maximum number of items to replay<br>
	 * Returns: A connectable observable of any values
	 * @see #publishReplay Publishing an observable
	 * @see #refCount Automatically connect/disconnect from a published observable
	 */
	action<integer> returns IObservable shareReplay;
	/**
	 * Take from the observable until a value is received on another provided observable. <br><br>
	 * Params: <br>
	 * &emsp;until - The observable which terminates the takeUntil<br>
	 * Returns: An observable of any values
	 * @see #takeWhile Take items until a predicate becomes false
	 * @see #skipUntil Skip items until an observable provides a value
	 */
	action<IObservable> returns IObservable takeUntil;
	/**
	 * Reconnect to an observable a certain number of times. <br><br>
	 * Params: <br>
	 * &emsp;count - The number of times to reconnect<br>
	 * Returns: An observable of any values
	 */
	action<integer> returns IObservable repeat;
	/**
	 * Apply a mapping to each item that results in multiple values (or an Observable) and merge each item in the result into the output.<br><br>
	 * Params: <br>
	 * &emsp;mapper - The mapping function. Can return a sequence, a dictionary, an IObservable, or an ISubject<br>
	 * Returns: An observable of merged values from the result of the flatMap
	 * @see #map Apply a mapping function to each item
	 */
	action<any> returns IObservable flatMap;	
	/**
	 * Merge one or more other observables into this observable.<br><br>
	 * Params: <br>
	 * &emsp;otherObservables - A sequence of other observables<br>
	 * Returns: An observable containing the values from all observables
	 * @see #mergeAll Convert an observable of observables back to a single observable of values
	 */
	action<sequence<IObservable> > returns IObservable merge;
	/**
	 * Combine this observable with one or more others, sequentially (One from each).<br><br>
	 * Params: <br>
	 * &emsp;otherObservables - The other observables to combine with<br>
	 * &emsp;combiner - The function to use to combine the values<br>
	 * Returns: An observable of combined values
	 * @see #combineLatest - Combine the latest values form all observables (non-sequential)
	 * @see #withLatestFrom - Combine the latest but only when the main emits (non-sequential)
	 */
	action<sequence<IObservable>, action<sequence<any> > returns any> returns IObservable zip;
	/**
	 * For an observable of observables, subscribe to the latest and emit those values.<br><br>
	 * Params: <br>
	 * Returns: An observable of any values
	 * @see #mergeAll - Combine all of the observables into a single one
	 * @see #concatAll - Combine all of the observables, connecting only after the previous completes
	 */
	action<> returns IObservable switchOnNext;
	/**
	 * Skip values from the observable until a value is received on another provided observable. <br><br>
	 * Params: <br>
	 * &emsp;until - The observable which starts the emission<br>
	 * Returns: An observable of any values
	 * @see #skipWhile Skip items until a predicate becomes false
	 * @see #takeUntil Take items until an observable provides a value
	 */
	action<IObservable> returns IObservable skipUntil;
	/**
	 * Get the N'th element from an observable. <br><br>
	 * Params: <br>
	 * &emsp;n - The element index<br>
	 * Returns: An observable of a single value
	 * @see #take Take the first N items
	 * @see #skip Skip the first N items
	 */
	action<integer> returns IObservable elementAt;
	/**
	 * Aggregate the data and emit the aggregated value when the source completes. <br>
	 * Note: The first value is emitted without aggregation<br><br>
	 * Params: <br>
	 * &emsp;reducer - The function to calculate the aggregated value (The first argument is the accumulator, the second is the incoming value) <br>
	 * Returns: An observable of just the aggregated value
	 * @see #reduceWithInitial The same but with an initial value for the accumulator
	 * @see #scan Aggregate the data but emit every value
	 */
	action<any> returns IObservable reduce;
	/**
	 * Aggregate the data and emit the aggregated value when the source completes. The initial value for the aggregation is supplied.<br><br>
	 * Params: <br>
	 * &emsp;scanner - The function to calculate the aggregated value (The first argument is the accumulator, the second is the incoming value) <br>
	 * &emsp;initialValue - The initial value for the accumulator <br>
	 * Returns: An observable of aggregated values
	 * @see #reduce The same but use the first value as the initial value for the aggregate
	 * @see #scanWithInitial Aggregate the data but emit every value
	 */
	action<any, any> returns IObservable reduceWithInitial;
	/**
	 * Output the observable to a stream.<br><br>
	 * Returns: A DisposableStream. Dispose should be called on it once any strem processing is done.
	 * @see com.industry.rx_epl.DisposableStream
	 */
	action<> returns DisposableStream toStream;	
	/**
	 * In the event of an error connect to an alternative observable.<br><br>
	 * Params: <br>
	 * &emsp;substitute - An observable to use in the case of an error <br>
	 * Returns: An observable of any values
	 * @see #retry Reconnect to the source in the event of an error
	 */
	action<IObservable> returns IObservable catchError;
	/**
	 * In the event of an error reconnect to the source.<br><br>
	 * Params: <br>
	 * &emsp;count - The maximum number of retry attempts<br>
	 * Returns: An observable of any values
	 * @see #repeat Reconnect to the source on completion
  	 * @see #catchError On error substitute an alternative source
	 */
	action<integer> returns IObservable retry;
	/**
	 * observeOn moves the subscription and any downstream operators onto another context.<br><br>
	 * Params: <br>
	 * &emsp;observation - An action to run on another context which will susbcribe to the source. The second argument provided to the observation is a dispose action to terminate all subscriptions.<br>
	 * &emsp;targetContext - The context to run on<br>
	 * Returns: An IDisposable that should be disposed when all the downstream subscribers are finished
	 * @see #observeOnNew The same but on a new context
 	 * @see #subscribeOn Move the entire chain onto another context
	 */
	action<action<IObservable, action<> >, context> returns IDisposable observeOn;
	/**
	 * Group the data onto separate observables.<br><br>
	 * Params: <br>
	 * &emsp;observation - An action to run on another context which will susbcribe to the source<br>
	 * &emsp;targetContext - The context to run on<br>
	 * Returns: An IDisposable that should be disposed when all the downstream subscribers are finished
	 * @see #observeOnNew The same but on a new context
	 * @see #subscribeOn Move the entire chain onto another context
	 */
	action<any> returns IObservable groupBy;
	/**
	 * observeToChannel allows an observable to be connected to another monitor or context.<br><br>
	 * Note: Use Observable.fromChannel() to receive
	 * Params: <br>
	 * &emsp;channelName - The name of the channel to emit to.<br>
	 * Returns: An IDisposable that should be disposed when all the downstream subscribers are finished
	 * @see com.industry.rx_epl.Observable#observeFromContext Connect to an observeToChannel
	 */
	action<string> returns IDisposable observeToChannel;
	/**
	 * observeOnNew moves the subscription and any downstream operators onto a new context.<br><br>
	 * Params: <br>
	 * &emsp;observation - An action to run on another context which will susbcribe to the source. The second argument provided to the observation is a dispose action to terminate all subscriptions.<br>
	 * Returns: An IDisposable that should be disposed when all the downstream subscribers are finished
	 * @see #observeOn Move to a specific context
	 * @see #subscribeOn Move the entire chain onto another context
	 */
	action<action<IObservable, action<> > > returns IDisposable observeOnNew;
	/**
	 * Check that every value passes a predicate.<br><br>
	 * Params: <br>
	 * &emsp;predicate - An action that determines whether a value passes.<br>
	 * Returns: An observable that is true if all pass and false otherwise
	 * @see #contains Find if any values match the predicate
	 */
	action<any> returns IObservable every;
	/**
	 * Check that any value passes a predicate.<br><br>
	 * Params: <br>
	 * &emsp;predicate - An action that determines whether a value passes.<br>
	 * Returns: An observable that is true if at least one item passes and false otherwise
	 * @see #every Check all values match the predicate
	 */
	action<any> returns IObservable contains;
	/**
	 * Take while a predicate returns true.<br><br>
	 * Params: <br>
	 * &emsp;predicate - An action that determines whether a value passes.<br>
	 * Returns: An observable of any values
	 * @see #skipWhile Skip while a predicate returns true
	 * @see #take Take the first N values
	 * @see #takeUntil Take until an observable returns a value
	 */
	action<any> returns IObservable takeWhile;
	/**
	 * Skip while a predicate returns true.<br><br>
	 * Params: <br>
	 * &emsp;predicate - An action that determines whether a value is skipped.<br>
	 * Returns: An observable of any values
	 * @see #takeWhile Take while a predicate returns true
	 * @see #skip Skip the first N values
	 * @see #skipUntil Skip until an observable returns a value
	 */
	action<any> returns IObservable skipWhile;
	/**
	 * Append the values from one or more observables to this observable.<br><br>
	 * Params: <br>
	 * &emsp;otherObservables - A sequence of other observables<br>
	 * Returns: An observable containing the values from all observables
	 * @see #concatAll Convert an observable of observables back to a single observable of values by concatenating all of the values
	 */
	action<sequence<IObservable> > returns IObservable concat;
	/**
	 * Add some values to the start of an observable.<br><br>
	 * Params: <br>
	 * &emsp;values - The values to start the observable with<br>
	 * Returns: An observable containing the provided values and the values from this observable
	 * @see #concat Combine 2 observables by concatenating their output
	 */
	action<sequence<any> > returns IObservable startWith;
	/**
	 * Return a value just before completion if no other values were emitted.<br><br>
	 * Params: <br>
	 * &emsp;value - The value to emit if no others were<br>
	 * Returns: An observable containing at least one any value
	 */
	action<any> returns IObservable defaultIfEmpty;
	/**
	 * Ignore all values but allow completion and error.<br><br>
	 * Returns: An observable containing no values
	 */
	action<> returns IObservable ignoreElements;
	/**
	 * Count the number of items emitted by an observable.<br><br>
	 * Note: only emits on completion <br>
	 * Returns: An observable containing the count
	 * @see #sum Sum all of the observable values
	 * @see #min Find the minimum value in an observable
	 * @see #max Find the maximum value in an observable
	 * @see #average Find the average of the values in an observable
	 */
	action<> returns IObservable count;
	/**
	 * Sum any numeric values emitted by an observable.<br><br>
	 * Note: only emits on completion <br>
	 * Accepts: float, decimal, integer <br>
	 * Returns: An observable containing the sum as a float
	 * @see #sumInteger sum only integer values and produce an integer result
	 * @see #sumFloat sum only float values and produce a float result
	 * @see #sumDecimal sum only decimal values and produce a decimal result
	 * @see #count Count the number of values emitted
	 * @see #min Find the minimum value in an observable
	 * @see #max Find the maximum value in an observable
	 * @see #average Find the average of the values in an observable
	 */
	action<> returns IObservable sum;
	/**
	 * Sum integer values emitted by an observable.<br><br>
	 * Note: only emits on completion <br>
	 * Accepts: integer <br>
	 * Returns: An observable containing the sum as a integer
	 * @see #sum Sum any numeric values and produce a float result
	 * @see #sumFloat sum only float values and produce a float result
	 * @see #sumDecimal sum only decimal values and produce a decimal result
	 * @see #count Count the number of values emitted
	 * @see #min Find the minimum value in an observable
	 * @see #max Find the maximum value in an observable
	 * @see #average Find the average of the values in an observable
	 */
	action<> returns IObservable sumInteger;
	/**
	 * Sum float values emitted by an observable.<br><br>
	 * Note: only emits on completion <br>
	 * Accepts: float <br>
	 * Returns: An observable containing the sum as a float
	 * @see #sum Sum any numeric values and produce a float result
	 * @see #sumInteger sum only integer values and produce an integer result
	 * @see #sumDecimal sum only decimal values and produce a decimal result
	 * @see #count Count the number of values emitted
	 * @see #min Find the minimum value in an observable
	 * @see #max Find the maximum value in an observable
	 * @see #average Find the average of the values in an observable
	 */
	action<> returns IObservable sumFloat;
	/**
	 * Sum decimal values emitted by an observable.<br><br>
	 * Note: only emits on completion <br>
	 * Accepts: decimal <br>
	 * Returns: An observable containing the sum as a float
	 * @see #sum Sum any numeric values and produce a float result
	 * @see #sumInteger sum only integer values and produce an integer result
	 * @see #sumFloat sum only float values and produce a float result
	 * @see #count Count the number of values emitted
	 * @see #min Find the minimum value in an observable
	 * @see #max Find the maximum value in an observable
	 * @see #average Find the average of the values in an observable
	 */
	action<> returns IObservable sumDecimal;
	action<> returns IObservable concatString;
	action<> returns IObservable max;
	action<> returns IObservable maxInteger;
	action<> returns IObservable maxFloat;
	action<> returns IObservable maxDecimal;
	action<> returns IObservable min;
	action<> returns IObservable minInteger;
	action<> returns IObservable minFloat;
	action<> returns IObservable minDecimal;
	action<> returns IObservable average;
	action<> returns IObservable averageDecimal;
	action<sequence<IObservable> > returns IObservable sequenceEqual;
	action<sequence<IObservable> > returns IObservable amb;
	action<> returns IObservable timestamp;
	action<> returns IObservable updateTimestamp;
	action<float> returns IObservable timeout;
	action<> returns any getSync;
	action<any> returns any getSyncOr;
	action<> returns IObservable timeInterval;
	action<> returns IObservable distinctUntilChanged;
	action<any> returns IObservable distinctByUntilChanged;
	action<any> returns IObservable switchMap;
	action<float> returns IObservable debounce;
	action<float> returns IObservable windowTime;
	action<float> returns IObservable throttleFirst;
	action<float> returns IObservable throttleLast;
	action<float> returns IObservable sampleTime;
	action<IObservable> returns IObservable buffer;
	action<float> returns IObservable bufferTime;
	action<integer> returns IObservable bufferCount;
	action<float, integer> returns IObservable bufferTimeOrCount;
	action<sequence<IObservable> > returns IObservable combineLatestToSequence;
	action<sequence<IObservable> > returns IObservable withLatestFromToSequence;
	action<sequence<IObservable> > returns IObservable zipToSequence;
	action<IObservable> returns IObservable groupByWindow;
	action<integer> returns IObservable windowCount;
	action<float, integer> returns IObservable windowTimeOrCount;
	action<IObservable> returns IObservable sample;
	action<integer> returns IObservable sampleCount;
	action<float, integer> returns IObservable sampleTimeOrCount;
	action<integer, integer> returns IObservable bufferCountSkip;
	action<sequence<action<action<IObserver> returns ISubscription> returns action<IObserver> returns ISubscription> > returns IObservable pipe;
	action<any> returns IObservable pluck;
	action<> returns IObservable mergeAll;
	action<sequence<action<action<IObserver> returns ISubscription> returns action<IObserver> returns ISubscription>, context> returns IObservable pipeOn;
	action<sequence<action<action<IObserver> returns ISubscription> returns action<IObserver> returns ISubscription> > returns IObservable pipeOnNew;
	action<Subscriber, context> returns ISubscription subscribeOn;
	action<Subscriber> returns ISubscription subscribeOnNew;
	action<> returns IObservable pairwise;
	action<action<action<IObserver> returns ISubscription> returns action<IObserver> returns ISubscription> returns IObservable let;
	action<any> returns IObservable groupByField;
	action<action<IObservable> returns IObservable> returns IObservable complexPipe;
	action<action<IObservable> returns IObservable, context> returns IObservable complexPipeOn;
	action<action<IObservable> returns IObservable> returns IObservable complexPipeOnNew;
	action<> returns IObservable decouple;
	action<string> returns IObservable distinctByField;
	action<string> returns IObservable distinctByFieldUntilChanged;
	action<IObservable> returns IObservable pausable;
	action<IObservable> returns IObservable pausableBuffered;
	action<string> returns IDisposable toChannel;
}
