//package com.industry.rx_epl;
//
//using com.apama.exceptions.Exception;
//
//monitor RxEpl {
//	IObservable o;
//	
////	action onload() {
////		o := Observable.fromValues([1.0, 2.0, 3.0])
////			.map(multiplyBy10)
////			.share();
////
////		ISubscription subscription := o.subscribe(Subscriber.create().onNext(printValue).onComplete(printComplete));
////		
////		on wait(1.0) {
////			subscription := o.subscribe(Subscriber.create().onNext(printValue).onComplete(printComplete));
////		}
////	}
//	
////	Subject s;
////	float i := 0.0;
////	action onload() {
////		s := Subject.create();
////		o := s.getIObservable()
////			.map(multiplyBy10)
////			.share();
////		
////		ISubscription subscription := o.subscribe(Subscriber.create().onNext(printValue).onComplete(printComplete));
////		
////		on wait(5.0) {
////			subscription := o.subscribe(Subscriber.create().onNext(printValue).onComplete(printComplete));
////		}
////		
////		on wait(11.0) {
////			log "Subscribing after complete" at INFO;
////			subscription := o.subscribe(Subscriber.create().onNext(printValue).onComplete(printComplete));
////		}
////		
////		s.next(i);
////		i := i + 1.0;
////		
////		on all wait(1.0) {
////			s.next(i);
////			i := i + 1.0;
////		}
////		
////		on wait(10.0) {
////			s.complete();
////		}
////	}
//	
////	IBehaviorSubject s;
////	float i := 0.0;
////	action onload() {
////		s := BehaviorSubject.create(i);
////		o := s
////			.map(multiplyBy10)
////			.share();
////		
////		ISubscription subscription := o.subscribe(Subscriber.create().onNext(printValue).onComplete(printComplete));
////		
////		on wait(8.0) {
////			log "Current value: " + s.getValue().valueToString() at INFO;
////		}
////		
////		on wait(5.0) {
////			subscription := o.subscribe(Subscriber.create().onNext(printValue).onComplete(printComplete));
////		}
////		
////		on wait(11.0) {
////			subscription := o.subscribe(Subscriber.create().onNext(printValue).onComplete(printComplete));
////		}
////		
////		on all wait(1.0) {
////			i := i + 1.0;
////			s.next(i);
////		}
////		
////		on wait(10.0) {
////			s.complete();
////		}
////	}
//	
//
////	action onload() {
////		o := Observable.interval(1.0)
////			.map(multiplyBy10)
////			.share();
////		
////		ISubscription subscription := o.subscribe(Subscriber.create().onNext(printValue).onComplete(printComplete));
////		
////		on wait(5.0) {
////			subscription := o.subscribe(Subscriber.create().onNext(printValue).onComplete(printComplete));
////		}
////	}
//	
////	action onload() {
////		o := Observable.interval(1.0)
////			.take(5)
////			.map(multiplyBy10);
////		
////		ISubscription subscription := o.subscribe(Subscriber.create().onNext(printValue).onComplete(printComplete));
////		
////		on wait(5.0) {
////			subscription := o.subscribe(Subscriber.create().onNext(printValue).onComplete(printComplete));
////		}
////	}
//
////	action onload() {
////		sequence<float> numbers := new sequence<float>;
////		 
////		float i := 0.0;
////		while i < 20000.0 {
////			numbers.append(i);
////			i := i + 1.0;
////		}
////		
////		o := Observable.fromValues(numbers)
////			.map(multiplyBy10)
////			.take(5);
////		
////		ISubscription subscription := o.subscribe(Subscriber.create().onNext(printValue).onComplete(printComplete));
////	}
//	
////	action onload() {
////		o := Observable.fromValues([0.0,1.0,2.0,3.0,4.0,5.0])
////			.takeLast(1)
////			.map(multiplyBy10);
////		
////		ISubscription subscription := o.subscribe(Subscriber.create().onNext(printValue).onComplete(printComplete));
////	}
//	
////	action onload() {
////		sequence<float> numbers := new sequence<float>;
////		 
////		float i := 0.0;
////		while i < 20000.0 {
////			numbers.append(i);
////			i := i + 1.0;
////		}
////		
////		o := Observable.fromValues(numbers)
////			.takeLast(1)
////			.map(multiplyBy10);
////		
////		ISubscription subscription := o.subscribe(Subscriber.create().onNext(printValue).onComplete(printComplete));
////	}
//
////	action onload() {
////		o := Observable.interval(0.001)
////			.take(50)
////			.takeLast(3);
////		
////		ISubscription subscription := o.subscribe(Subscriber.create().onNext(printValue).onComplete(printComplete));
////	}
//	
////	action onload() {
////		o := Observable.interval(0.001)
////			.take(15)
////			.last();
////		
////		ISubscription subscription := o.subscribe(Subscriber.create().onNext(printValue).onComplete(printComplete));
////	}
//	
////	action onload() {
////		o := Observable.interval(1.0)
////			.share()
////			.skip(5)
////			.take(5);
////		
////		ISubscription subscription := o.subscribe(Subscriber.create().onNext(printValue).onComplete(printComplete));
////	}
//	
////	action onload() {
////		o := Observable.fromIterator(incrementingIterator)
////			.share()
////			.skip(5000000)
////			.take(2);
////		
////		ISubscription subscription := o.subscribe(Subscriber.create().onNext(printValue).onComplete(printComplete));
////	}
//	
////	action onload() {
////		o := Observable.fromIterator(incrementingIterator)
////			.filter(isEven)
////			.take(6);
////		
////		ISubscription subscription := o.subscribe(Subscriber.create().onNext(printValue).onComplete(printComplete));
////	}
//	
////	action onload() {
////		o := Observable.fromIterator(incrementingIterator)
////			.scan(sumWithPrevious)
////			.take(6);
////		
////		ISubscription subscription := o.subscribe(Subscriber.create().onNext(printValue).onComplete(printComplete));
////	}
//	
//	action onload() {
//		o := Observable.interval(1.0)
//			.scanWithInitial(sumWithPrevious, 5.0)
//			.take(5);
//		
//		ISubscription subscription := o.subscribe(Subscriber.create().onNext(printValue).onComplete(printComplete));
//	}
//	
//	action sumWithPrevious(any previous, any value) returns any {
//		return <float> previous + <float> value;
//	}
//	
//	float i := 0.0;
//	action incrementingIterator() returns any {
//		i := i + 1.0;
//		return i;
//	}
//
//	action isGT15(any value) returns boolean {
//		return <float> value > 11.0;
//	}
//	
//	action isEven(any value) returns boolean {
//		return (<float> value).round() % 2 = 0;
//	}
//	
//	action printComplete() {
//		log "Complete";
//	}
//	
//	action errorHandler(Exception e, any triggerValue) returns any {
//		return 0.0;
//	}
//	
//	action mapToObservable(any value) returns any {
//		return Observable.fromValues([value, value]);
//	}
//	
//	action printValue(any value) {
//		log value.valueToString();
//	}
//	
//	action multiplyBy10(any value) returns any {
//		//log "Multiplying " + value.valueToString() + " by 10" at INFO;
//		return <float>value * 10.0;
//	}
//}
